
 데이터 입출력
	1. 입출력 스트림
	2. 바이트 출력 스트림
	3. 바이트 입력 스트림
	4. 문자 입출력 스트림
	
	5. 보조 스트림
	6. 문자 변환 스트림 (보조스트림)
	7. 성능 향상 스트림 (보조스트림)
	8. 기본 타입 스트림 (보조스트림)
	9. 프린트 스트림 (보조스트림)
	10. 객체 스트림 (보조스트림)
	
	11. File과 Files 클래스
	
	
-------------------------------------------

	1. 입출력 스트림
	
		- 출발지 → 프로그램 → 도착지
		- 출발지(키보드, 파일, 프로그램)에서 프로그램으로 입력 스트림을 통해 데이터가 이동
		- 프로그램에서 도착지(모니터, 파일, 프로그램)로 출력 스트림을 통해 데이터가 이동
		
		- 스트림 종류
			- 바이트 스트림 : 그림, 멀티미디어, 문자 등 모든 종류의 데이터를 입출력할 때 사용
				- InputStream (최상위클래스)
					- XxxInputStream (하위클래스)
				- OutputStream (최상위클래스)
					- XxxOutputStream (하위클래스)
				
			- 문자 스트림 : 문자만 입출력할 때 사용 (실제로는 바이트로 흘러감)
				- Reader (최상위클래스)
					- XxxReader (하위클래스)
				- Writer (최상위클래스)
					- XxxWriter (하위클래스)
		
		
		□□□□ 텍스트 File 데이터를 스트림으로 입출력 할 때 □□□□
		
			FileInputStream → 프로그램 → FileOutputStream
				# 문자 데이터를 바이트화 해주는 작업 필요
			
			또는
			
			FileReader → 프로그램 → FileWirter
				# 문자 바로 사용 가능
		
		
-----------------------------------------------------------------
		
	2. 바이트 출력 스트림
	
		OutputStream (최상, 추상 클래스)
			- FileOutputStream (자식)
			- PrintStream (자식)
			- BufferedOutputStream (자식)
			- DataOutputStream (자식)
			
		
		□□□□ OutputStream 메소드 □□□□
		
			void write(정수)					: 정수(4byte)중 끝 1byte만 출력
			void write(byte[])				: 매개값 바이트배열 모두 출력
			void write(byte[], 시작인덱스, 개수)	: byte[] 시작인덱스 부터 개수만큼 바이트 출력
			
			void flush()					: 출력버퍼에 잔류하는 모든 바이트 출력
			
			void close()					: 자동 flush() 후 출력 스트림 닫고 메모리 해제
			
			
			# -128 ~ 127는 그대로 바이트로 출력
			# 범위 미만/초과 정수는 잘려서 출력됨

		
	■■■■ FileOutputStream으로 바이트 DB에 write(정수)출력하여 저장하기 ■■■■
		
		try{
			OutputStream os = new FileOutputStream("C:/ThisIsJavaTemp/test1.db");
			
			byte a = 10;
			byte b = 20;
			byte c = 30; 
			byte d = 127;
			byte e = 128;
			
			os.write(a);	// == os.write(10);
			os.write(b);	// == os.write(20);
			os.write(c);	// == os.wirte(30);
			os.write(d);	// == os.write(127);
			os.wirte(e);	// != os.write(128);
			
			os.flush();
			[os.close();]	// 별로 좋은 위치는 아니지만 FileOutputStream이 AutoCloseable 구현객체이므로 현재위치에 사용해도 됨
		}
		catch(Exception e){
			e.printStackTrace();
		}
		[finally{
			try{
				os.close()
			}catch(IOException e){}
		}]	
		// 예외발생해도 무조건 close() 호출하게끔 하는 게 좋긴 함, 단 OutputStream을 블럭 밖에 선언해줘야 함
		
		
			# XxxOutputStream은 AutoCloseable 인터페이스를 구현하고 있으므로 
				try{}catch(예외){예외처리}finally{os.close()} 안 해줘도 됨
		
	
	
--------------------------

	3. 바이트 입력 스트림
	
		- InputStream (최상, 추상)
			- FileInputStream (자식)
			- BufferedInputStream (자식)
			- DataInputStream (자식)
		
		
		
		□□□□ InputStream 메소드 □□□□
		
			int read()			: 1byte를 읽은 후 바이트를 정수형 바꿔 리턴, 읽을 데이터가 없으면 -1 리턴
			int read(byte[])	: 읽은 바이트를 매개값으로 주어진 바이트 배열에 저장 후 읽은 바이트 개수 리턴, 읽을 데이터가 없으면 -1 리턴
			close()				: 입력 스트림 종료
		
		
		
		■■■■ InputStream으로 바이트 읽어오기 ■■■■
		
			try{
				InputStream is = new FileInputStream("경로");
				
				while(true){
				int data = is.read();
				if(is.read() == -1) break;
				System.out.println(data);
				}
				
				is.close();
			}catch(FileNotFoundException e){
				e.printStackTrace();
			}catch(IOException e){
				e.printStackTrace();
			}
		
		
		■■■■ InputStream으로 바이트 배열 읽어오기 ■■■■
		
			try{
				InputStream is = new FileInputStream("경로");
				
				byte[] data = new byte[100];
				
				while(true){
					int num = is.read(data);
					if(num == -1) break;
					
					for(int i=0; i<num; i++){
						System.out.println(data[i]);
					}
				}
				
				is.close();
			}catch(Exception e){
				e.printStackTrace();
			}
		
		
		-------------------------
		방법2. FileInputStream은 AutoCloseable 인터페이스를 상속하고있으므로 이럴때는 try(객체생성;){}catch(){}문을 사용하여 close()메소드 없이 쓸 수 있음
		
			try(InputStream is = FileInputStream("경로");) {
			
				byte[] data = new byte[100];
				
				while(true) {
					int num = is.read(data);
					if(num == -1) break;
					
					for(int i=0; i<num; i++) {
						System.out.println(data[i]);
					}
				}
			}catch(IOException e) {
				e.printStackTrace();
			}
		
		
		
		
		
		■■■■ InputStream, OutputStream 으로 JPEG 파일을 test2.jpg 이름 변경한 후 C:/ThisIsJavaTemp 에 저장하기 ■■■■
		
			String originalFileName = "C:/ThisIsJavaTemp/test.jpg";
			String copyFileName = "C:/ThisIsJavaTemp/test2.jpg";
		
			try (InputStream is = new FileInputStream(originalFileName); OutputStream os = new FileOutputStream(copyFileName);) {
			
				byte[] data = new byte[1024];
				
				while(true) {
					int num = is.read(data);
					if(num == -1) {
						break;
					}
					os.write(data, 0, num);
				}
			
				os.flush();

				System.out.println("복사가 잘 되었습니다");
			
			}catch(Exception e) {
			
			}
		
		
		
		
--------------------------------------------------------------------------

	4. 문자 입출력 스트림
	
	
	문자 출력 스트림 (Writer)
	
		- Writer (최상, 추상)
			- FileWriter (자식)
			- BufferedWriter (자식)
			- OutputStreamWriter (자식)
			- PrintWriter (자식)
		
		
		□□□□ Writer 메소드 □□□□
		
			void write(문자)						: 문자매개변수를 정수(4Byte)로 자동 바꿔서 스트림에 들어온 문자 하나 출력
			void write(char[])					: char 배열의 모든 문자 출력
			void write(char[] , 시작인덱스, 개수)	: char 배열의 시작인덱스부터 개수만큼 출력
			void write(문자열)					: 모든 문자열 출력
			void write(문자열, 시작번호, 개수)		: 문자열에서 시작번호부터 개수만큼 출력
			void flush()						: 버퍼에 잔류하는 모든 문자 출력
			void close()						: 스트림 닫고 메모리에서 해제
		
		
	
		
	문자 입력 스트림 (Reader)
	
		- Reader (최상, 추상)
			- FileReader (자식)
			- BufferedReader (자식)
			- InputStreamReader (자식)
		
		
		□□□□ Reader 메소드 □□□□
		
			int read()				: 문자 읽고 문자를 유니코드(정수)로 리턴, 읽을 문자 데이터 없으면 -1 리턴
			int read(char[] ch)		: 문자 배열에 읽은 문자들을 저장한 후 저장한 문자 수 리턴, 읽을 문자 데이터 없으면 -1 리턴
			close()					: 스트림 닫고 메모리에서 해제
		

---------------------------------------------------------------

	5. 보조 스트림
	
		- 입력스트림 → (보조스트림) → 프로그램 → (보조스트림) → 출력스트림
		- 스트림 사이에 연결하여 보조 기능을 사용할 수 있게, 성능을 향상 하는 스트림
			- 기능
				- 바이트 스트림을 문자 스트림으로 변환
				- 입출력 성능 향상
				- 기본 타입 데이터 입출력
				- 줄바꿈 처리 및 형식화된 문자열 출력
				- 객체 입출력
		
		- 보조스트림1 변수 = new 보조스트림1(입출력스트림);
		
		- 보조스트림은 체인 구성 가능
		- 보조스트림2 변수 = new 보조스트림2(보조스트림1);


	
		□□□□ 자주 사용되는 보조 스트림 종류 □□□□	

			InputStreamReader			: 바이트 스트림을 문자 스트림으로 변환
			OutputStreamWriter			: 바이트 스트림을 문자 스트림으로 변환
			
			BufferedInputStream			: 입출력 성능 향상
			BufferedOutputStream		: 입출력 성능 향상
			BufferedReader				: 입출력 성능 향상
			BufferedWriter				: 입출력 성능 향상
			
			DataInputStream				: 기본 타입 데이터 입력
			DataOutputStream			: 기본 타입 데이터 출력
			
			PrintStream					: 줄바꿈 처리 및 형식화된 문자열 출력
			PrintWriter					: 줄바꿈 처리 및 형식화된 문자열 출력
			
			ObjectInputStream			: 객체 입력
			ObjectOutputStream			: 객체 출력



		사용 방법
		
			보조스트림 한 개
			
			InputStream is = new FileInputStream("C:/.....");
			InputStreamReader isReader = new InputStreamReader(is);
			
			
			보조스트림 두 개를 체인연결
			
			InputStream is = new FileStream("C:/...");
			InputStreamReader isReader= new InputStreamReader(is);
			BufferedReader br = new BufferedReader(isReader);
			

-------------------------------------------------------------------------------

	6. 문자 변환 스트림 (보조 스트림)
	
	InputStreamReader
	OutputStreamWriter
	
		- InputStream → Reader로 변환
			- 바이트 스트림 → 문자 입력 스트림
			- 보조스트림 InputStreamReader 사용
			
			사용방법
			
			InputStream is = new FileInputStream("C:/경로");
			Reader rd = new InputStreamReader(is);

			# FileReader가 내부적으로 위의 변환 스트림을 갖고있음
			
			
		
		- OutputStream → Writer로 변환
			- 바이트 스트림 → 문자 출력 스트림
			- 보조스트림 OutputStreamWriter 사용
			
			사용방법
			
			OutputStream os = new FileOutputStream("C:/경로");
			Writer wt = new OutputStreamWriter(os);
			
			# FileWriter가 내부적으로 위의 변환 스트림 갖고있음
	
		
------------------------------------------------------------------------------------

	7. 성능 향상 스트림 (보조 스트림)
	
	BufferedInputStream
	BufferedOutputStream
	
	BufferedReader
	BufferedWriter
			
		
		- 네트워크, DB, 저장공간과 프로그램 사이에 메모리 버퍼를 사용하여 통신 횟수를 줄여 성능을 향상시킴 (읽고 쓰는 데에 매우 빨라짐)
		- 특히 문자입력 스트림 Reader에 BufferedReader을 연결하면 성능향상 + readLine() 메소드를 사용할 수 있음
			- readeLine() 메소드 : 파일의 문자열을 행 단위로 읽어옴
	
	
			BufferedInputStream			: 바이트 입출력 성능 향상
			BufferedOutputStream		: 바이트 입출력 성능 향상
			
			BufferedReader				: 문자 입출력 성능 향상
			BufferedWriter				: 문자 입출력 성능 향상
			
		
			
		■■■■ Buffered 스트림 사용하기 ■■■■
		
			BufferedInputStream bis = new BufferedInputStream(바이트 입력 스트림);
			BufferedOutputStrema bos = new BufferedOutputStream(바이트 출력 스트림);
			
			BufferedReader br = new BufferedReader(문자 입력 스트림);
			BufferedWriter bw = new BufferedWriter(문자 출력 스트림);
			
			
		
		
		■■■■ BufferedReader클래스의 readLine() 메소드 사용하기 ■■■■	
		
			FileReader fr = new FileReader("C:/...");
			BufferedReader br = new BufferedReader(fr);
			
			while(true) {
				String tmpStr = br.readLine();
				if(tmpStr == null) {
					break;
				}
				System.out.println(tmpStr);
			}
			br.close();


----------------------------------------------------------------------------------

	8. 기본 타입 스트림 (보조스트림)
	
	DataInputStream
	DataOutputStream
	
		- 바이트스트림 → (기본 타입 보조 스트림) → 기본타입 스트림
		
		
		□□□□ DataInputStream 제공 메소드 □□□□
		
			boolean readBoolean()
			byte readByte()
			char readChar()
			double readDouble()
			float readFloat()
			int readInt()
			long readLong()
			shot readShort()
			String readUTF()
			
			
		□□□□ DataInputStream 제공 메소드 □□□□
		
			void readBoolean(boolean v)
			void readByte(int v)
			void readChar(int v)
			void readDouble(double v)
			void readFloat(float v)
			void readInt(int v)
			void readLong(long v)
			void readShort(int v)
			void readUTF(String str)
	
		
		■■■■ DataInputStream / DataOutputStream 사용하기 ■■■■
		
		try{
		
			FileOutputStream fos = new FileOutputStream("경로");
			DataoutputStream dos = new DataOutputStream(fos);
		
			dos.writeUTF("문장");
			dos.writeInt(1);
			dos.writeDouble(1.1);
			
			dos.writeUTF("문장2");
			dos.writeInt(2);
			dos.writeDouble(2.1);
			
			dos.flush();
			dos.close();
			fos.close();
			
			
			FileInputStream fis = new FileInputStream("경로");
			DataInputStream dis = new DataInputStream(fis);
			
			
			//읽어오기 방법1
			for(int i=0; i<2; i++) {
				String str = dis.readUTF();
				int num = dis.readInt();
				double score = dis.readDouble();
				
				System.out.println(str + num + score);
			}
			
			
			//읽어오기 방법2	( read() 메소드 사용 시 읽어올 게 없어서 null인 경우 EOFException 예외발생, 예외처리를 통해 while문 break로 빠져나옴)
			try {
				while(true) {
					String str = dis.readUTF();
					int num = dis.readInt();
					double score = dis.readDouble();
				
					System.out.println(str + num + score);
				}
				
			}catch(EOFException e) {
				break;
			}
			
			
			
		}catch(IOException e){
		
		}
		


----------------------------------------------------------------------------

	9. 프린트 스트림 (보조스트림)
	
	PrintStream
	PrintWriter
	
		- System.out.print() / System.out.printf() / System.out.println() 에서 out이 프린트스트림 타입
		- PrintStream / PrintWriter는 print() printf() println() 메소드를 갖고있는 보조스트림이다
		
		
		
		
		□□□□ PrintStream / PrintWriter 메소드 □□□□
			
			void print(boolean b)
			void print(char c)
			void print(double d)
			void print(int i)
			void print(float f)
			void print(long l)
			void print(Object obj)
			void print(String str)
			
			void println(boolean b)
			void println(char c)
			void println(double d)
			void println(int i)
			void println(float f)
			void println(long l)
			void println(Object obj)
			void println(String str)
			void println()
		
			void printf()
						

		■■■■ PrintStream / PrintWriter 사용하기 ■■■■

			PrintStream ps = new PrintStream(바이트출력스트림);
			
			PrintWrtier pw = new PrintWriter(바이트출력스트림/문자출력스트림);
			
			
			ps.print();
			ps.println();
			ps.printf();
			
			ps.print();
			pw.println();
			pw.printf();
			
			
		
--------------------------------------------------------------------------------------------			

	10. 객체 스트림 (보조스트림)
	
	ObjectInputStream
	ObjectOutputStream
	
		- 직렬화(serialization)		: 객체를 입출력하기 위해 일렬로 늘어선 바이트로 변경
		- 역직렬화(deserialization)	: 일렬로 늘어선 바이트를 객체로 변경
		
			# java.io.Serializable 인터페이스를 구현한 객체만 스트림에서 객체로, 객체에서 스트림을 변환 가능
		
		
		바이트 → InputStrema → (ObjectInputStream/역직렬화) → 프로그램 객체 → (ObjectOutputStream/직렬화) → OutputStream → 바이트
		
		
		■■■■ ObjectInputStream / ObjectOutputStream 사용하기 ■■■■


			ObjectInputStream ois = new ObjectInputStream(바이트 입력 스트림);
			ObjectOutputStream oos = new ObjectOutputStream(바이트 출력 스트림);
			
			객체타입 변수 = (객체타입) ois.readObject();	// 바이트를 객체타입으로 입력하기위한 메소드
			oos.writeObject(obj); 	// 객체를 바이트로 출력하기위한 메소드


	
	
	
		# java.io.Serializable 인터페이스와 serialVersionUID 필드
		
			- 직렬화가 필요한 객체는 implements Serializable 해줘야 함
			- 직렬화 가능 객체에서 직렬화 필요없는 필드는 앞에 transient 선언해 주면 됨
			- static 필드도 직렬화 제외됨
			
			- 직렬화 클래스의 경우 static final long serialVerionUID 필드에 고유 숫자를 넣어줘야함
				- 직렬화, 역직렬화 할 때 동일 객체임을 나타내기 위해
				- 이클립스에서 자동으로 넣어주는 기능이 있음 (Add generated serial version ID)
		
		
		
-----------------------------------------------------------------------------------------





		