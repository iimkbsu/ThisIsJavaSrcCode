
1. 입출력 스트림에 대한 설명 중 틀린 것은?
	- 하나의 스트림으로 입력과 출력이 동시에 가능하다 (X)
	- 프로그램을 기준으로 데이터가 들어오면 입력 스트림이다
	- 프로그램을 기준으로 데이터가 나가면 출력 스트림이다
	- 콘솔에 출력하거나 파일에 저장하려면 출력 스트림을 사용해야 한다
	
	# 스트림은 단방향 흐름이므로 입력 스트림, 출력 스트림 이 따로 필요하다
	# 스트림은 재사용이 안 되므로 한 번 사용 후 새로운 스트림이 필요하다
	

2. InputStream과 Reader에 대한 설명으로 틀린 것은?
	- 이미지 데이터는 InputStream 또는 Reader로 모두 읽을 수 있다 (X)
	- Reader의 read() 메소드는 1문자를 읽는다
	- InputStream과 read() 메소드는 1byte를 읽는다
	- InputStreamReader를 이용하면 InputStream을 Reader로 변환할 수 있다
	
	# InputStream은 바이트를 Reader는 문자를 읽는다
	# 이미지 데이터는 InputStream으로 읽어야 한다
	

3. InputStream의 read(byte[] b) 메소드에 대한 설명으로 틀린 것은?
	- 메소드의 리턴값을 읽은 바이트 수이다
	- 매개값 b에는 읽은 데이터가 저장된다
	- 읽을 수 있는 바이트 수는 제한이 없다 (X)
	- 매개값 b에는 이전에 읽은 바이트가 남아 있을 수 있다
	
	# 읽을 수 있는 바이트는 1byte로 제한되어있으므로 int(4byte)값이 들어왔을 때 가장 끝 1byte만 읽는다
	# read() 메소드의 경우 읽은 바이트를 int형으로 리턴하는데 0~255, 읽은 바이트가 없는 경우 -1을 리턴한다
	

4. 출력 스트림에서 데이터를 출력 후 flush() 메소드를 호출하는 이유는?
	- 출력 스트림의 버퍼에 있는 데이터를 모두 출력시키고 버퍼를 비운다 (O)
	- 출력 스트림을 메모리에서 제거한다
	- 출력 스트림의 버퍼에 있는 데이터를 모두 삭제한다
	- 출력 스트림을 닫는 역할을 한다
	
	# 스트림을 닫고 메모리에서 제거하는 것은 close() 메소드이다
	

5. 보조 스트림에 대한 설명으로 틀린 것은?
	- InputStreamReader는 InputStream을 Reader로 변형시키는 보조 스트림이다
	- BufferedInputStream은 데이터 읽기 성능을 향상시키는 보조 스트림이다
	- DataInputStream은 객체를 입출력하는 보조 스트림이다 (X)
	- PrintStream은 print(), println() 메소드를 제공하는 보조스트림이다
	
	# DataInputStream은 객체를 기본타입 스트림으로 바꾸는 보조스트림이다
	
	
6. ObjectInputStream, ObjectOutputStream에 대한 설명으로 틀린 것은 무엇인가?
	- 객체를 직렬화해서 출력하고 역직렬화해서 복원시킨다
	- Serializable 인터페이스를 구현한 객체만 입출력할 수 있다
	- 클래스의 serialVersionUID는 입출력할 때 달라도 상관없다 (X)
	- transient 필드는 출력에서 제외된다.
	
	# Serializable 인터페이스를 구현한 클래스의 객체는 ObjectInputStream ObjectOutputStream을 사용해 바이트 스트림 객체로 바꿀 수 있고
	# 같은 객체라는 걸 알리기 위해 serialVersionUID long 값이 같아야 한다 (static final long)
	# static이나 transient 필드는 바이트 스트림으로 바뀔 때 직렬화에서 제외된다


8. PrintStream에 대한 설명으로 틀린 것은?
	- out 필드는 콘솔로 출력하는 PrintStream 타입이다
	- print(), println(), printf() 메소드를 제공한다
	- println() 메소드는 매개값의 타입에 따라 오버로딩되어 있다
	- PrintStream은 문자 기반 출력 스트림에 연결된다 (X)
	
	# printf()는 매매값 타입에 따라 개발자가 오버로딩 해야 하지만 println()은 오버로딩 되어있어서 간편하게 사용 가능하다.
	# PrintStream은 바이트 기반 출력 스트림에 연결되고 PrintWriter가 문자 기반 출력 스트림에 연결된다.
	

9. File과 Files 클래스에 대한 설명으로 틀린 것은?
	- File 객체는 파일이 실제로 존재하지 않아도 생성할 수 있다
	- File 객체는 파일 정보만 제공하고, 디렉토리 정보는 제공하지 않는다 (X)
	- Files 클래스는 정적 메소드로 구성되어 있기 때문에 객체 생성 필요가 없다
	- File 객체는 파일의 크기를 제공하는 length() 메소드를 제공한다
	
	# File 객체의 메소드 기능에는 파일 존재여부 확인, 존재하지 않을 때 파일/디렉토리 생성, 존재할 때 삭제,실행가능여부,읽기여부,수정저장여부, 파일의 다양한 정보 확인 등이 가능하다.
	# Files는 java.nio.file.Files 패키지이고 제공하는 메소드는 모두 static 타입이고 Path 객체를 매개값으로 사용한다.
	# 파일 크기 확인은 File은 length() / Files는 size(Path path) 메소드를 사용한다
	
	
	
	
	
	
	