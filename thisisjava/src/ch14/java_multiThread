
CPU(Central Processing Unit)의 구성

	- Core(코어)	: CPU에서 핵심요소. 각종 연산을 담당하며 멀티 core를 장착한 CPU가 대세

	- ALU		: 산술/논리 연산장치. 제어 장치로부터 전달받은 명령어를 바탕으로 사칙연산, 논리합, 논리곱 등 연산을 수행하고 결과를 제어장치에 전달

	- CU		: 제어장치. 메모리로부터 명령어를 얻어 기계어로 해석한 후 그 의미에 따라 연산장치, 메모리, 입출력장치 등에게 동작을 지시

	- 레지스터	: CPU(중앙처리장치) 내부에 존재하는 소규모 고속 기억장치. 데이터를 임시 저장. 메모리계층 최상층에 위치하고 가장 빠른 접근속도를 가짐 (종류 : 일반 + 특수)
	
		- 특수 레지스터
		PC		: 프로그램 카운터. 다음 실행 명령어 주소 저장
		MAR		: 메모리주소 레지스터. 읽기 쓰기 연산 수행을 위한 주기억장치 주소 저장
		IR		: 명령어 레지스터. 호출된 명령어를 해독하기 위해 임시 저장
		AC		: 어큐뮬레이터(누산기). ALU 연산 결과를 임시 저장
		MBR		: 메모리 버퍼 레지스터. 주기억장치 내용 임시 저장
		SP 		: 스택 포인터. 스택의 최상위 주소를 저장
		IX 		: 인덱스 레지스터. 인덱스 주소 지정 방식에서 인덱스를 저장
	

프로세스	: 메모리 상에서 실행중인 프로그램 및 그 단위. 하나 이상의 스레드를 보유. stack, heap, code 등 별도의 독립 주소공간을 부여받음
스레드	: 프로세스 안에서 실행되는 흐름 단위. stack만 각각 할당 받고 heap, code 등은 스레드끼리 공유 주소공간을 부여받음

스레드 개발 목적
	- 프로세스보다 작은 실행 단위 필요
	- 멀티 프로세스에서 프로세스간 통신을 용이하게 해줌
	- 프로세스 오버헤드 감소
	- 빠른 컨텍스트 스위칭 (주소공간 공유)

멀티 프로세스	: 여러 개의 CPU를 사용하여 다중 프로세싱을 함
멀티 스레드		: 프로세스에 다중 스레드가 동시에 작업을 수행함
멀티 코어		: CPU 하나에 핵심 연산장치인 코어의 개수를 늘려 CPU 효율을 늘림

2CPU 4코어 8스레드 = 2코어로 이루어진 4개의 동시작업을 수행할 수 있는 4 스레드를 가진 CPU가 2개 있는 사양

------------------------------------------------------------------------------------


자바 메인 스레드
	- main() 메소드의 흐름. main()메소드가 끝날 때 메인 스레드 종료
	- main() 메소드 하나만 작업하는 싱글 스레드일 경우 메소드가 종료되면 스레드와 프로세스가 종료됨

자바 멀티 스레드
	- 프로세스 안에서 생성되는 스레드에 예외가 발생한 경우 프로세스가 종료되므로 예외처리 필수
	- 메인 스레드가 종료되어도 멀티 스레드에 처리될 작업이 남아있다면 프로세싱을 지속함
	- 데이터 분할 병렬처리, 안드로이드 앱의 네트워크 통신, 웹 서버의 다수 클라이언트 처리 등에 멀티 스레드 기술 사용


-----------------------------------------------------------------------------------

현재 실행중인 스레드 이름(메소드 이름) 얻기
	- Thread myCurrThread = Thread.currentThread();
	- System.out.println(myCurrThread);
	- System.out.println(myCurrThread.getName());
	
-----------------------------------------------------------------------------------	

작업 스레드 생성 및 실행
	- 어떤 프로그램을 작동시킬 코드를 만들 때 만약 병렬로 동시에 처리해야할 작업이 있다면 스레드를 생성하여 사용
	1. Thread 클래스로 직접 생성하기
	2. Thread 클래스의 자식 클래스를 만들어 생성하기


1. Thread 클래스로 직접 생성
	- java.lang 패키지의 Thread 클래스 사용
	- Thread myThread = new Thread(Runnable target); 객체 생성
	- Runnable 인터페이스의 구현 클래스 객체(target)에서 재정의한 run(){...} 메소드가 실제 스레드가 실행할 내용
	- myThread.start(); 메소드로 스레드 실행
	
	# Runnable 인터페이스를 구현한 모든 클래스가 target으로 올 수 있음
	# Runnable 인터페이스에는 한 개의 추상메소드 run()이 있음
	

사용 예.

------<Runnable 인터페이스의 구현 클래스를 만들어 이를 객체로 Thread에 대입하는 방법.>-------


class MyTask implements Runnable {
	
	@Override
	public void run(){
		스레드가 실행할 코드...
	}
}



Runnable myRun = new MyTask();

Thread myThread = new Thread(myRun);


myThread.start();
	
	


-------<Runnable 익명 구현 객체를 사용하여 Thread에 대입하는 방법.>--------


Thread myThread = new Thread(new Runnable(){
	@Override
	public void run(){
		스레드가 실행할 코드...
	}
});
	

myThread.start();	



	*참고 : 스레드 밀리초 단위로 일시 정지
	try {
		Thread.sleep(500);
	}catch(Exception e) {			
	}



	*참고 : beep음 내기
	import java.awt.Toolkit;

	Toolkit myTool = Toolkit.getDefaultToolkit();
	myTool.beep();





2. Thread 자식클래스로 스레드 생성
	- 자식스레드 extends Thread 를 만들어서 상속받은 후 Override로 run() 메소드 재정의 (스레드에도 run() 메소드가 있는데 이는 Runnable 인터페이스 구현객체의 run()을 자동호출한 것임)
	- 자식스레드.start(); 로 스레드 실행
	
	

사용 예.

------<Thread 클래스를 직접 상속받은 자식스레드를 만들고 run() 메소드를 재정의 한 후 이를 사용하는 방법.>---------

public class ChildThread extends Thread {
	@Override
	public void run(){
		스레드 실행 코드...
	}
}

Thread myThread = new ChildThread();
myThread.start();




------<Thread의 익명 자식 객체를 통해 사용하는 방법.>--------

Thread myThread = new Thread(){
	@Override
	public void run(){
		스레드 실행 코드...
	}
}

myThread.start();


 *참고

Thread 클래스는 실행 메서드의 구현을 제공하고 스레드 실행을 제어하는 ​​데 사용할 수 있는 시작, 중지, 절전 등과 같은 다른 메서드도 함께 제공.
반면 Runnable 인터페이스는 기능적 인터페이스로서 스레드에 의해 실행될 코드를 정의할 수 있는 run()이라는 메서드 하나만 존재.
그데 왜 굳이 두 개로 나눠서 쓰냐.... 둘 중 하나로 합쳐서 쓰지....
이유는, Thread를 바로 사용하려면 상속을 받아야 하는데 자바는 다중 상속을 허용하지 않기 때문에 Thread 클래스를 바로 상속받는 경우 다른 클래스를 상속받지 못함.
하지만 Runnable 인터페이스를 구현한 객체를 사용하는 경우, 다른 인터페이스를 추가로 구현할 수 있고 더해서 다른 클래스도 상속받을 수 있음.

Runnable 구현 클래스를 쓰거나 익명 구현객체로 해서 많이 씀. Thread는 기능만 쓰고 상속해서 쓰지 않음. 상속 아까움
--------------------------------------------------------------------------------------------------

스레드 이름
	- 









	
