
스레드 전체 요약.

	스레드 하나씩 만들기

	메인 스레드 작업을 여러 스레드에게 나눠서 동시에 작업시키고 싶을 때(비동기)
		- 스레드 클래스를 사용하여 스레드 객체를 만들거나 익명자식객체로 run() 메소드를 실행
		- 러너블 인터페이스를 사용하여 러너블 구현객체를 만들거나 익명구현객체로 run() 메소드 실행
		- 메인 스레드에서 구현된 스레드들이라서 전체 스레드가 다 끝나야 메인 스레드가 끝나고 프로세스가 종료됨. 예외처리 잘 해야 함.
	
	동기화
		- synchronized 메소드나 synchronized(공유 스레드객체 or 러너블객체){}를 통해 하나의 스레드로만 실행하게 만들 수 있음.
	
	스레드 상태 확인 및 변경
	
		- 스레드 이름 설정			: setName("###");
		- 스레드 이름 호출 			: getName();
		- 스레드 실행 				: start();
		- 현재 돌아가는 스레드 호출 	: Thread.currentThread();
		
		- 실행 → 일시정지
			- wait(); 			: 동기화블록 내에서만 사용.
			- join();			: 스레드1에서 스레드2.join() 호출하면 스레드2가 끝날 때 까지 일시정지 했다가 스레드2가 끝나면 스레드1 실행대기 및 실행
			- sleep(밀리초);		: 밀리초 동안 일시정지 후 실행대기로 빠짐.
			
		- 일시정지 → 실행대기
			- interrupt() 				: 예외 발생시키기. 실행대기 또는 종료 선언 가능
			- notify(), notifyAll()		: 동기화블록 내에서 호출된 wait()으로 인해 일시정지 된 스레드를 실행대기로 만듦
		
		- 실행 → 실행대기
			- yield()	: 실행하다가 잠깐 실행대기로 빠지고 다른 스레드에게 실행 양보
			
			
		# sleep(), wait(), join()은 try, catch로 예외가 발생했을 경우 처리 대비를 해줘야 함
	
	
	스레드 안전 종료
		- Thread.interrupted()	: 인터럽트 발생한 경우 true 아닌경우 false 반환. 조건으로 사용
		- thread객체.isInterrupted()	: 인터럽트 발생한 경우 true 아닌경우 false 반환. 보통 run() 메소드 블록 안에서 this.isInterrupted() 조건으로 사용
		
	
	데몬스레드 (주인 스레드가 종료되면 강제 종료되는 스레드)
		- 일반적으로 스레드1에서 호출된 스레드2가 다 종료되어야 스레드1이 종료됨.
		- 스레드1에서 호출된 데몬스레드는 스레드1이 종료되면 데몬스레드 강제 종료됨.
		
		- 스레드.setDaemon(true);
		



	스레드풀 만들어 하나의 반복 작업을 여러 스레드가 작업큐에서 순서대로 빼서 동시에 작업함

	
	스레드풀
		- 어떤 반복되는 한 작업을 여러 스레드가 분담해서 동시에 처리하게 하는 기술
		- 작업큐에 작업이 순서대로 넣어지고 이를 처리 요청하여 하나씩 꺼내서 여러 스레드들이 실행함
	
	
	필요한 import
	
	import java.util.concurrent.*;
	
		- Executors				: 클래스
		- ExecutorService		: 인터페이스 (스레드풀 구현객체가 됨)
		
		- ThreadPoolExecutor	: 클래스
		- SynchronousQueue<T>	: 작업큐 클래스
		- TimeUnit				: 시간 단위 ENUM
		
		- Callable<T>			: 인터페이스, (Runnable과 비슷. 단, 작업 처리 결과를 T 타입의 Future로 리턴)
		- Future<T>				: 인터페이스, Callable 결과를 T타입으로 받음
		
		
	스레드풀 생성
		
		- ExecutorService myThreadPool1 = Executors.newCachedThreadPool();
		
		- ExecutorService myThreadPool2 = Executors.newFixedThreadPool(최대스레드개수);
		
		- ExecutorService myThreadPool3 = ThreadPoolExecutor(초기스레드개수, 최대스레드개수, 스레드유지기간L, TimeUnit.기간단위, new SynchronousQueue<Runnable>() );
		
		
	스레드풀 execute 으로 실행
	
		 myThreadPool.execute(new Runnable(){
			@Override
			public void run(){
				//스레드풀에서 스레드들이 나눠서 처리할 내용
			}
		});
		
	
	
	스레드풀 sumbit으로 실행하고 결과 future로 리턴받기
		
		Future<Integer> future = myThreadPool.submit(new Callable<Integer>(){
			@Override
			public Integer call(){
				int sum = 0;
				return sum;
			}
		});
		
		int result = future.get();
		System.out.println(result);
		

--------------------------------------------------------------------------------------------------------------------------------------

	


CPU(Central Processing Unit)의 구성

	- Core(코어)	: CPU에서 핵심요소. 각종 연산을 담당하며 멀티 core를 장착한 CPU가 대세

	- ALU		: 산술/논리 연산장치. 제어 장치로부터 전달받은 명령어를 바탕으로 사칙연산, 논리합, 논리곱 등 연산을 수행하고 결과를 제어장치에 전달

	- CU		: 제어장치. 메모리로부터 명령어를 얻어 기계어로 해석한 후 그 의미에 따라 연산장치, 메모리, 입출력장치 등에게 동작을 지시

	- 레지스터	: CPU(중앙처리장치) 내부에 존재하는 소규모 고속 기억장치. 데이터를 임시 저장. 메모리계층 최상층에 위치하고 가장 빠른 접근속도를 가짐 (종류 : 일반 + 특수)
	
		- 특수 레지스터
		PC		: 프로그램 카운터. 다음 실행 명령어 주소 저장
		MAR		: 메모리주소 레지스터. 읽기 쓰기 연산 수행을 위한 주기억장치 주소 저장
		IR		: 명령어 레지스터. 호출된 명령어를 해독하기 위해 임시 저장
		AC		: 어큐뮬레이터(누산기). ALU 연산 결과를 임시 저장
		MBR		: 메모리 버퍼 레지스터. 주기억장치 내용 임시 저장
		SP 		: 스택 포인터. 스택의 최상위 주소를 저장
		IX 		: 인덱스 레지스터. 인덱스 주소 지정 방식에서 인덱스를 저장
	

프로세스	: 메모리 상에서 실행중인 프로그램 및 그 단위. 하나 이상의 스레드를 보유. stack, heap, code 등 별도의 독립 주소공간을 부여받음
스레드	: 프로세스 안에서 실행되는 흐름 단위. stack만 각각 할당 받고 heap, code 등은 스레드끼리 공유 주소공간을 부여받음

스레드 개발 목적
	- 프로세스보다 작은 실행 단위 필요
	- 멀티 프로세스에서 프로세스간 통신을 용이하게 해줌
	- 프로세스 오버헤드 감소
	- 빠른 컨텍스트 스위칭 (주소공간 공유)

멀티 프로세스	: 여러 개의 CPU를 사용하여 다중 프로세싱을 함
멀티 스레드		: 프로세스에 다중 스레드가 동시에 작업을 수행함
멀티 코어		: CPU 하나에 핵심 연산장치인 코어의 개수를 늘려 CPU 효율을 늘림

2CPU 4코어 8스레드 = 2코어로 이루어진 4개의 동시작업을 수행할 수 있는 4 스레드를 가진 CPU가 2개 있는 사양

------------------------------------------------------------------------------------


자바 메인 스레드
	- main() 메소드의 흐름. main()메소드가 끝날 때 메인 스레드 종료
	- main() 메소드 하나만 작업하는 싱글 스레드일 경우 메소드가 종료되면 스레드와 프로세스가 종료됨

자바 멀티 스레드
	- 프로세스 안에서 생성되는 스레드에 예외가 발생한 경우 프로세스가 종료되므로 예외처리 필수
	- 메인 스레드가 종료되어도 멀티 스레드에 처리될 작업이 남아있다면 프로세싱을 지속함
	- 데이터 분할 병렬처리, 안드로이드 앱의 네트워크 통신, 웹 서버의 다수 클라이언트 처리 등에 멀티 스레드 기술 사용


-------------------------------------------------------------------------------------------------------------------------------

현재 실행중인 스레드 이름(메소드 이름) 얻기
	- Thread myCurrThread = Thread.currentThread();
	- System.out.println(myCurrThread);
	- System.out.println(myCurrThread.getName());
	
-------------------------------------------------------------------------------------------------------------------------------	

작업 스레드 생성 및 실행
	- 어떤 프로그램을 작동시킬 코드를 만들 때 만약 병렬로 동시에 처리해야할 작업이 있다면 스레드를 생성하여 사용
	1. Thread 클래스로 직접 생성하기
	2. Thread 클래스의 자식 클래스를 만들어 생성하기


1. Thread 클래스로 직접 생성
	- java.lang 패키지의 Thread 클래스 사용
	- Thread myThread = new Thread(Runnable target); 객체 생성
	- Runnable 인터페이스의 구현 클래스 객체(target)에서 재정의한 run(){...} 메소드가 실제 스레드가 실행할 내용
	- myThread.start(); 메소드로 스레드 실행
	
	# Runnable 인터페이스를 구현한 모든 클래스가 target으로 올 수 있음
	# Runnable 인터페이스에는 한 개의 추상메소드 run()이 있음
	

사용 예.

□□□□□□□ Runnable 인터페이스의 구현 클래스를 만들어 이를 객체로 Thread에 대입하는 방법 □□□□□□□ 


class MyTask implements Runnable {
	
	@Override
	public void run(){
		스레드가 실행할 코드...
	}
}



Runnable myRun = new MyTask();

Thread myThread = new Thread(myRun);


myThread.start();
	
	


□□□□□□□ Runnable 익명 구현 객체를 사용하여 Thread에 대입하는 방법 □□□□□□□


Thread myThread = new Thread(new Runnable(){
	@Override
	public void run(){
		스레드가 실행할 코드...
	}
});
	

myThread.start();	



	*참고 : 스레드 밀리초 단위로 일시 정지
	try {
		Thread.sleep(500);
	}catch(Exception e) {			
	}



	*참고 : beep음 내기
	import java.awt.Toolkit;

	Toolkit myTool = Toolkit.getDefaultToolkit();
	myTool.beep();





2. Thread 자식클래스로 스레드 생성
	- 자식스레드 extends Thread 를 만들어서 상속받은 후 Override로 run() 메소드 재정의 (스레드에도 run() 메소드가 있는데 이는 Runnable 인터페이스 구현객체의 run()을 자동호출한 것임)
	- 자식스레드.start(); 로 스레드 실행
	
	

사용 예.

□□□□□□□ Thread 클래스를 직접 상속받은 자식스레드를 만들고 run() 메소드를 재정의 한 후 이를 사용하는 방법 □□□□□□□

public class ChildThread extends Thread {
	@Override
	public void run(){
		스레드 실행 코드...
	}
}

Thread myThread = new ChildThread();
myThread.start();




□□□□□□□ Thread의 익명 자식 객체를 통해 사용하는 방법 □□□□□□□

Thread myThread = new Thread(){
	@Override
	public void run(){
		스레드 실행 코드...
	}
}

myThread.start();


 *참고

Thread 클래스는 실행 메서드의 구현을 제공하고 스레드 실행을 제어하는 ​​데 사용할 수 있는 시작, 중지, 절전 등과 같은 다른 메서드도 함께 제공.
반면 Runnable 인터페이스는 기능적 인터페이스로서 스레드에 의해 실행될 코드를 정의할 수 있는 run()이라는 메서드 하나만 존재.
그데 왜 굳이 두 개로 나눠서 쓰냐.... 둘 중 하나로 합쳐서 쓰지....
이유는, Thread를 바로 사용하려면 상속을 받아야 하는데 자바는 다중 상속을 허용하지 않기 때문에 Thread 클래스를 바로 상속받는 경우 다른 클래스를 상속받지 못함.
하지만 Runnable 인터페이스를 구현한 객체를 사용하는 경우, 다른 인터페이스를 추가로 구현할 수 있고 더해서 다른 클래스도 상속받을 수 있음.

Runnable 구현 클래스를 쓰거나 익명 구현객체로 해서 많이 씀. Thread는 기능만 쓰고 상속해서 쓰지 않음. 상속 아까움
--------------------------------------------------------------------------------------------------

스레드 이름
	- 스레드는 이름을 갖고 있음
		- 메인 스레드 이름 : main
		- 작업 스레드 이름 : Thread-n
			- Thread 클래스의 setName("이름") 메소드로 작업 스레드의 이름 변경 가능
			
	- 디버깅 시 스레드에서 어떤 메소드가 돌아가는지 조사하기 위함
	
	- 현재 실행중인 스레드 이름(메소드 이름) 얻기
		- Thread myCurrThread = Thread.currentThread();
		- System.out.println(myCurrThread);
		- System.out.println(myCurrThread.getName());
		
		*참고
			- 스레드를 익명자식객체로 만들 때 run()메소드 안에서는 바로 getName() 메소드만 써도 스레드 이름 불러올 수 있음. (스레드객체.getName() 사용 안 됨)


-------------------------------------------------------------------------------------------------------------------------


스레드 상태
	- 스레드 객체를 만들어 start() 해도 바로 실행되는 것이 아님
	- 스케쥴링에 따라 run() 메소드를 실행하고 일시정지(sleep()) 또는 종료되면 순번이 넘어가 실행대기 상태에 있는 스레드를 실행상태로 바꿈
	- getState() 메소드로 상태 확인 가능 (Thread.State 리턴)


일시정지 상태 메소드
	- sleep(long 밀리초)		: 밀리초 만큼 일시정지 후 실행대기상태가 됨 (try catch 예외처리 필요)
	- join()				: 스레드 안에서 start(), join() 메소드로 호출한 스레드의 run() 메소드가 마무리 될 때 까지 일시정지 했다가 실행 대기상태가 됨
	- wait()				: 동기화 블록 내에서 스레드 일시정지
	
일시정지 벗어나는 메소드
	- interrupt()			: 일시정지 상태일 때 사용하여 InterruptException 예외 발생시키고 싱행대기 또는 종료 상태가 됨
	- notify()				: wait() 메소드로 인해 일시정지 상태인 스레드를 실행대기로 만듦
	- notifyAll()			: wait() 메소드로 인해 일시정지 상태인 스레드를 실행대기로 만듦
	
실행중에서 실행대기상태로 메소드
	- yield()				: 실행상태에서 다른 스레드에게 실행 양보하고 실행대기가 됨
	

*참고
	wait() notify() notifyAll()은 Object 클래스의 메소드임 (어떤 클래스든 사용 가능)
	
	sleep(long 밀리초)  join() interrupt() yield() 메소드는 Thread 클래스 메소드임
	


□□□□□□□ sleep() 사용 방법 □□□□□□□
	
	try{
		Thread.sleep(1000);
	}catch(InterruptedException e){
	}



□□□□□□□ join() 사용 방법 □□□□□□□

	//main 스레드 안에서 실행 된 threadA가 끝날 때 까지 일시정지 했다가 threadA가 끝나면 조인해서 실행대기 함
	
	<Thread main>
	
	Thread threadA = new Thread();
	threadA.start();
	
	try{
		threadA.join();  
	}catch(InterupptedException e){
	}




□□□□□□□  yield() 사용방법 □□□□□□□

boolean 타입 work에 대해, work가 false라도 while(true)문은 계속 무한 반복. 이 때 스레드를 양보하여 실행대기를 걸어 효율성을 늘린다.

	public void run(){
		
		while(true){
		
			if(work){
				System.out.println("ThreadA 작업 내용");
			}else{
				Thread.yield();
			}
		}
	}


--------------------------------------------------------------------------------------------------------

동기화 비동기화
	- 동기화(Synchronous) 	: 데이터 요청에 대한 응답이 돌아왔을 때 다음 동작을 수행 (요청 후 응답 전까지 대기상태)
		□□□□□□□□
				■■■■■■■■■■■■
							▤▤▤▤▤▤▤▤▤▤
						
	- 비동기화(Asynchronous)	: 데이터 요청에 대한 응답과는 별개로 다음 동작 바로 수행 (요청 후 다음 동작 바로 실행)
		□□□□□□□□
		■■■■■■■■■■■■
		▤▤▤▤▤▤▤▤▤▤
		


스레드 동기화
	- 스레드가 어떤 객체의 동기화 메소드, 동기화 블록을 사용할 때 다른 스레드가 동기화 메소드, 동기화 블록에 접근할 수 없도록 하는 기술
	- 일반 메스드는 여러 스레드가 동시에 접근 가능
	

동기화 메소드 및 블록 선언
	
	
	□□□□□□□□ 메소드 전체를 동기화 □□□□□□□□
	
	public synchronized void 동기화메소드명(){
		하나의 스레드만 실행 가능 내용
	}

	
	
	□□□□□□□□ 메소드 내용중 일부만 동기화 □□□□□□□□
	
	public void 메소드명(){
		
		synchronized(공유객체){
			객체를 잠궈서 하나의 스레드만 실행 가능 내용
		}
		
		일반 메소드(여러 스레드가 실행 가능)
	}
	
	





wait(), notify() 메소드를 이용한 스레드 제어 및 동기화

	* wait() notify() notifyAll()은 Object 클래스의 메소드임 (어떤 클래스든 사용 가능)
	* 동기화 블록 or 동기화 메소드 안에서만 사용가능. (동기화 된 메소드끼리 사용가능)
	* wait()은 interruptedException 발생하므로 예외처리 필수


실행중인 작업 스레드에서 wait() → waiting pool에서 대기하는 일시정지 스레드로 바뀜

다른 스레드에서 notify() → waiting pool에서 대기중인 일시정지 스레드를 실행대기로 만듦 (notifyAll(). 모두 실행대기로 만듦)


	□□□□□□□□ wait(), notify() 사용법 □□□□□□□□
	
	public synchronized void method1(){	
		notify();
	
		try{
			wait();
		}catch(InterruptedExection e){
		}
	}
	
	




----------------------------------------------------------------------------------------------

스레드 안전 종료
	- run() 메소드를 이용하여 리소스를 정리한 후 빠르게 종료 시키는 방법
		- 조건을 이용
		- interrupt() 메소드 이용
		
*참고 : 강제종료인 stop() 메소드는 더 이상 사용하지 않음



□□□□□□□□ 조건 이용하여 스레드 안전 종료 □□□□□□□□

	while문을 이용하여 스레드를 실행하고 조건이 false가 되면 스레드를 빠져나오고 리소스를 정리
	
	
	boolean go = true;
	
	@Override
	void run(){
		while(go){
			//스레드 반복 실행문
		}
		//리소스 정리코드
	}
	
	
	
□□□□□□□□ interrupt() 메소드 이용하여 안전 종료 □□□□□□□□
	
	*sleep(1)을 해줘야 해서 비효율
	
	
	interrupt() 메소드는 스레드가 일시정지 상태일 때 InterruptedException을 발생시킴. 이를 예외처리 해주면 run()을 정상조료 시킬 수 있음
	
	<스레드>
	
	@Override
	public void run(){
		try{
			while(true){
				...
				Thread.sleep(1); //스레드 순간 일시정지 반복 (Thread.join(), wait() 도 역시 인터럽트가 발생하므로 사용가능)
			}
		}catch(InterruptedException e){
		}
		//리소스 정리
	}
	--------------------------------
	<main>
	
	Thread thread = new Thread();
	thread.start();
	....
	thread.interrupt(); // interrupt() 메소드 실행 순간 스레드가 일시정지 상태라면 catch()로 넘어감




□□□□□□□□ 효율적인 interrupted(), isInterrupted() 메소드로 안전종료 방법 □□□□□□□□

	일시정지 없이 interrupt()메소드가 호출되었는지 여부를 boolean으로 리턴해주는 메소드를 사용
	* sleep(1) 없어도 됨
	

	boolean a = Thread.interrupted();		//static 메소드임
	boolean b = 스레드객체.isInterrupted();		//인스턴스 메소드임
	
	
	
------------------------------------------------------------------------------------


데몬(Daemon) : 멀티태스킹 체제에서 사용자 제어 없이 백그라운드에서 돌면서 작업을 수행하는 프로그램

데몬 스레드	
	- 주 스레드를 작업에 도움을 주는 보조 스레드
	- 주 스레드에서 생성할 수 있음
	- 주 스레드가 종료되면 데몬 스레드도 같이 종료 (차이점. 기본 작업 스레드는 모든 스레드가 종료되어야 메인이 종료됨)
	
	
	
	□□□□□□□□ 데몬 스레드 만들기 □□□□□□□□
	
	주 스레드(or main에소드) 안에서 데몬이 될 스레드를 생성한 후 데몬스레드객체.setDaemon(true) 메소드로 데몬화 시킨 후 start() 해줌
	
	
	public class DaemonThread extends Thread{
		@Override
		public void run(){
			데몬 스레드가 작업할 내용
		}
	}
	---------------------------
	
	public static void main(String[] args){
		DaemonThread dt = new DaemonThread();
		dt.setDaemon(true);
		dt.start();
	}


----------------------------------------------------------------------------------------

★☆★☆★☆ 매우 중요 ★☆★☆★☆

풀(pool) - 작은 수영장(연못), 공동으로 이용할 데이터나 객체들을 모아두는 곳

스레드 풀
	- 복잡한 프로그램에서 다수의 병렬작업 때문에 여러 개의 스레드를 사용하게 되는데, 이 때 스레드의 폭증을 막는 방법
	- 스레드의 개수를 제한하고 이 스레드들이 작업 큐(FIFO)에서 대기중인 작업들을 순서대로 하나씩 갖고와서 처리한 후 이를 반복 (작업 완료한 스레드 재사용)
	- 스레드 개수가 폭증하여 앱의 실행이 저하되거나 죽는 것을 방지할 수 있음



	□□□□□□□□ 스레드 풀 생성 □□□□□□□□
		
		# java.util.concurrent 패키지에서 ExecutorService 인터페이스, Executors 클래스 제공
		
			*concurrent : 동시 발생하는, 공존하는
			
			
		
		방법 1. Executors 클래스의 static 메소드 이용하여 ExecutorService 인터페이스 구현객체 만들기
		
			- newCachedThreadPool()				: 초기 수:0	코어 수:0 		최대 수:integer.MAX_VALUE		무작업 스레드 유지기간 :60초	사용 여부: 제한이 없어 잘 사용 안 함
			- newFixedThreadPool(int n)			: 초기 수:0	코어 수:생성 수		최대 수:n						무작업 스레드 유지기간 :무한 	사용 여부: 많이 사용 함
			
			import java.util.concurrent.Executors; //클래스
			import java.util.concurrent.ExecutorService; //인터페이스
		
			ExecutorService es = Executors.newCachedThreadPool(); 
			또는
			
			ExecutorService es = Executors.newFixedThreadPool(5);
		
		
		
		방법 2. 위의 두 메소드 없이 ThreadPoolExecutor 클래스(부모 클래스가 ExecutorService 구현 클래스임)로 스레드풀 만들기
			
			* ThreadPoolExecutor 클래스 생성자가 조금 복잡하고 구체적임
			
			ExecutorService threadPool = new ThreadPoolExecutor(
				3,									// 코어 스레드 개수 (계속 유지되는 스레드 3개)
				100,								// 최대 스레드 개수 (제거 될 수 있는 스레드 97개)
				120L,								// 무작업 스레드 유지 시간
				TimeUnit.SECONDS,					// 유지 시간 단위
				new SynchronousQueue<Runnable>()	// 동기화 작업 큐
			);
		



	□□□□□□□□ 스레드 풀 종료 □□□□□□□□
		
		스레드는 모든 작업 스레드가 종료되어야 메인 스레드가 종료되고 작업이 마무리 됨 (데몬 스레드 아님)
		
		ExecutorService 인터페이스의 shutdown(), shutdownNow() 메소드 사용하여 모든 작업 스레드 종료
		
		
		(void 리턴 타입) 				shutdown() 메소드			: 현재 처리 중 작업, 큐 대기 작업을 모두 처리완료 후 스레드풀 종료
		(List<Runnable> 리턴 타입) 	shutdownNow() 메소드		: 현재 처리 중 작업은 interrupt 시켜 중지, 대기 작업은 List리턴값으로 보내고 스레드풀 바로 종료 (중지된 작업은 소실됨)
		
		
		
		

	□□□□□□□□ 작업 생성과 처리 요청 □□□□□□□□
	
	< 작업생성 >
		- 하나의 작업은 Runnable 또는 Callable 인터페이스의 구현 클래스로 표현 및 객체 생성
		
		
		<Ruunalbe 익명 구현객체>	// run() 리턴값 : 없음 , 많이 씀
		
		new Runnable(){
			@Override
			public void run(){
				//스레드 처리 작업 내용
			}
		}
		------------------------------
		
		<Callable 익명 구현객체>	// call() 리턴값 : Callable<T>에서 지정한 T 타입 파라미터와 동일한 타입, 많이 안 씀
		
		new Callable<T> {
			@Override
			public T call() throws Exception {
				//스레드 처리 작업 내용
				return T;
			}
		}
		
		
	
	< 작업처리 요청 >
		- ExcecutorService 인터페이스에서 두 가지 메소드 제공
		- 생성된 객체 작업 큐에 작업을 저장 및 처리하는 방법
		
		(void 리턴타입)		execute(Runnable command)	: Runnable을 작업 큐에 저장, 처리결과 리턴 없음
		(Future<T> 리턴타입)	submit(Callable<T> task)	: Callable을 작업 큐에 저장, 처리 결과 Future를 T 타입으로 리턴
		
		
		*참고 new SynchronousQueue<Runnable>() //작업 큐 객체 생성
		
		
		
		

	
