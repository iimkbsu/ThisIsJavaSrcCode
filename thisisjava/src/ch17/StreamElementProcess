
스트림 요소 처리
	- 스트림?
	- 내부 반복자
	- 중간 처리와 최종 처리
	- 리소스로부터 스트림 얻기
	- 요소 걸러내기(필터링)
	- 요소 변환(매핑)
	- 요소 정렬
	- 요소 하나씩 처리(루핑)
	- 요소 조건 만족 여부(매칭)
	- 요소 기본 집계
	- 요소 커스텀 집계
	- 요소 수집
	- 요소 병렬 처리
	
	

----------------------------------------------------------------------------

스트림(Stream)
	
	- 요소(엘리먼트)의 흐름
	- java 8 부터 사용가능한 배열의 요소를 반복처리하기 위한 기능
	- 람다식 사용하여 요소(엘리먼트)처리
	


기존의 방식 (외부 반복자 = 컬렉션에서 하나씩 갖고와서 개발자 코드에서 처리)
	- List의 경우 for문을 이용하여 idx 번호에 따라 get(idx)로 갖고오기
	- Set의 경우 향상된 for문으로 하나씩 갖고오거나, 또는 Iterator를 만들어 iterator()으로 for문에 hasNext()로 반복을 걸고 next()로 하나씩 갖고오는 방식
	
	# 외부 반복자(for문 idx, 향상된 for문, Iterator)는 하나씩 갖고와서 코드에서 처리하기 때문에 시간과 자원 낭비가 심함
	

----------------------------------------------------------------------------------


스트림의 내부 반복자
	
	- 개발자 코드에서 람다식으로 처리요청하고 컬렉션에서 내부 반복으로 처리함
	- 시간 자원 낭비 감소
	- 외부 반복자 사용 시 스레드 처리와 같은 번거로움이 없음 (내부 반복자는 알아서 나누고 병렬처리 함)
	- 중간, 말단 처리를 수행하도록 파이프 라인 형성 가능 (외부 반복자는 무조건 하나씩 다 꺼내야 하지만 내부 반복자는 중간, 말단에 조건을 걸러서 필터링, 매핑, 루핑, 매칭 등 가능)
	
	

스트림 방식으로 하나씩 반복처리    forEach( x -> {x처리 리턴} )
	
	Stream<String> myStream = 컬렉션명.stream(); //스트림 재사용 불가, 한 번 사용 시 다시 만들어야 함
	
	myStream.forEach( 요소변수명 -> 요소변수처리내용); //요소변수명 아무거나 가능
	
	
		# 인터페이스 Stream<T> 의 forEach()
	
			# void forEach(Consumer<? super T> action)   //와일드 카드 제네릭, T타입이거나 T의 부모타입이 매개변수타입으로 가능
	
				# Consumer<T> 함수형 인터페이스의 추상메소드 action() //action() 메소드 재정의하거나 람다식으로 처리코드 작성 가능

	
	
	
	
	■■■■ 스트림으로 Set 요소 처리하기 ■■■■
	
		Set<String> mySet = new HashSet<>();
		
		mySet.add("1");
		mySet.add("2");
		mySet.add("3");
		mySet.add("4");
		
		Stream<String> myStream = mySet.stream();
		
		//기본 람다식
		myStream.forEach( (num)->{System.out.println(num)});
		
		//더 줄이는 방법
		myStream.forEach( num -> System.out.println(num));
 
 
 
병렬처리 스트림

	- 컬렉션명.parallelStream()
 
 	Stream<타입> myStream = 컬렉션명.parallelStream();
 	myStream.forEach((변수명)->{처리내용});
 
 
 
 	■■■■ 병렬처리 스트림으로 Set 요소 처리하기 ■■■■
 		
 		Set<String> mySet = new HashSet<>();
		
		mySet.add("1");
		mySet.add("2");
		mySet.add("3");
		mySet.add("4");
		
		Stream<String> myStream = mySet.parallelStream();
		
		//기본 람다식
		myStream.forEach( (num)->{System.out.println(num)});
		
		//더 줄이는 방법
		myStream.forEach( num -> System.out.println(num));

------------------------------------------------------------------------------------

	스트림의 중간처리, 최종처리
	
		- 외부 반복자는 컬렉션에서 무조건 하나씩 요소를 다 꺼내야 함.
		- 스트림은 내부 반복자를 통해 중간, 최종에 조건을 걸어서 필터링, 매핑, 루핑, 매칭, 집계처리 등 가능 (원하는 요소만 뽑아서 수정 가능)

		# 중간처리 : 매핑(map), 필터링(filter, distinct), 정렬(sorted), 반복(peek) 등
		# 최종처리 : 반복(forEach), 카운팅(count), 평균(average), 리듀스(reduce) 등


---------------------------------------------------------------------------------

	리소스에서 스트림 얻기
	
		- 보통 컬렉션에서 스트림을 얻지만 리소스(데이터를 갖고있는 객체들)로부터 스트림을 얻을 수도 있음
		
		
		java.util.stream 패키지 안의 스트림 인터페이스
		
			BaseStream (공통 메소드 정의 스트림 인터페이스)
				┠ Stream		: 객체요소 처리 스트림 인터페이스
				┠ IntStream		: int 처리 스트림 인터페이스
				┠ LongStream	: long 처리 스트림 인터페이스
				┗ DoubleStream	: double 처리 스트림 인터페이스
				
		
		
		□□□ 컬렉션으로부터 스트림생성 메소드 □□□
	
		List, Set 컬렉션 → Stream<타입>		: 컬렉션명.stream();	컬렉션명.parallelStream();
		
		
		□□□ 배열, 리소스로부터 스트림생성 메소드 □□□
		
		배열 → Stream<타입>				: Arrays.stream(배열);			Stream.of(배열);
		int배열 → IntStream				: Arrays.stream(int배열);			IntStream.of(int배열);
		long배열 → LongStream				: Arrays.stream(long배열);		LongStream.of(long배열);
		double배열 → DoubleStream			: Arrays.stream(double배열);		DoubleStream.of(double배열);
		
		int 정수 범위 → IntStream			: IntStream.range(정수, 정수);	//끝 미포함	IntStream.rangeClosed(정수, 정수); //끝 포함
		long 정수 범위 → LongStream		: LongStream.range(정수, 정수);//끝 미포함	LongStream.rangeClosed(정수, 정수); //끝 포함
		
		디렉토리 → Stream<Path>			: Files.list(Path);
		텍스트파일 → Stream<String>			: Files.lines(Path, Charset); //Charset은 어떤 유니코드로 인코딩 되어있는지. 예. UTF-8
		
		랜덤수 → DoubleStream				: Random.doubles(...);
		랜덤수 → IntStream				: Random.ints();
		랜덤수 → LongStream				: Random.longs();
		



	# toString() 재정의
		
		@Override
		public String toString() {
			return new StringBuilder()
					.append("{")
					.append("pno : " + pno + ", ")
					.append("name : " + name + ", ")
					.append("price : " + price + ", ")
					.append("}")
					.toString();
		}
		
	# toString() 메소드는 객체를 사용할 때 자동으로 호출 되어 print(객체)라고 하면 콘솔에 문자열을 출력 해 줌
	
	

--------------------------------------------------------------------------------------------

 필터링 (요소 거르기)
 	
 	- 










	
	