

19장. 네트워크 입출력

	19.1 네트워크 기초
	19.2 IP 주소 얻기
	19.3 TCP 네트워킹
	19.4 UDP 네트워킹
	19.5 서버의 동시 요청 처리
	19.6 JSON 데이터 형식
	19.7 TCP 채팅 프로그램
	
-----------------------------------------------------------------------------------

	1. 네트워크 기초
	
		- 네트워크 : 여러 컴퓨터를 통신 회선으로 연결 한 것
			- LAN : Local Area Network (지역 통신망)
			- WAN : Wide Area Network (광대역 통신망)
		
		WAN ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
		┃				Internet			  ┃
		┃		Router ─────────── Router	  ┃
		┃			│				│		  ┃
		┃	LAN ━━━━━━━━┓	LAN ━━━━━━━━┓	  ┃
		┃	 ┃		│	┃	 ┃		│	┃	  ┃
		┃	 ┃	Switch	┃ 	 ┃	Switch	┃	  ┃
		┃	 ┃	│	│	┃ 	 ┃	│	│	┃	  ┃
		┃	 ┃ PC	PC	┃	 ┃ PC	PC	┃	  ┃
		┃	 ┗━━━━━━━━━━┛	 ┗━━━━━━━━━━┛	  ┃
		┃									  ┃
		┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
		
		
		
		- 서버 / 클라이언트
			- 클라이언트 : request, 데이터 및 서비스를 요청하는 프로그램 (서버에 연결 요청, 사용자가 사용할 때만 작동)
			- 서버 : response, 요청을 처리하고 데이터 및 서비스를 제공하는 프로그램 (클라이언트에 처리 응답, 24시간 대기 작동)


		- IP 주소
			- IP : Internet Protocol, 인터넷 규약
			- IP 주소는 네트워크 어댑터(LAN카드)마다 할당, 무선카드 유선카드마다 할당되므로 노트북의 경우 두 개의 IP주소가 있음
			- IP 주소 : 인터넷 규약에 따라 정해진 주소 체계
				- IPv4 : 0.0.0.0 ~ 255.255.255.255 개의 주소 개수
				- IPv6 : IPv4 주소 개수 부족을 해결하기 위한 진보된 주소 체계
				
				- 내부 IP 주소 : 사설 IP주소 (로컬 IP 주소)
					- IP 주소 부족을 해결하기 위해 일반적으로 DHCP(Dynamic Host Configuration Protocol)를 사용하여 동적 IP를 할당받음, 인터넷 공유기에서 컴퓨터나 휴대폰 등 기기에 할당하는 주소
					- Class A/B/C로 주소 대역이 나눠져서 고정되어있고 이 외의 주소는 외부IP(공인IP)주소임
				- 외부 IP 주소 : 공인 IP주소
					- 인터넷 서비스 공급자(ISP)가 제공하는 주소, 전세계 광대역 통신망에서 사용되는 유일한 주소로 외부에 공개되어있음, IP 주소 가격이 비쌈
				
			- DNS : Domain Name System, IP주소를 도메인 이름(문자)으로 매핑해주는 시스템


		# MAC 주소 : Media Access Control address, 물리 주소, 프로토콜 계층의 데이터 통신 주소, 모든 기기(라우터, 스위치, 랜카드 등)가 전부 고유 주소를 가짐
			- 인터넷은 IP주소와 MAC주소를 사용하여 통신함, IP 주소는 네트워크에 연결된 컴퓨터를 식별하는 SW 기반 논리주소이고 MAC 주소는 고유한 LAN카드(컴퓨터)를 식별하는 주소임
			- 컴퓨터간 인터넷 통신 과정은 OSI 7계층으로 이루어져 있고 MAC주소는 데이터링크 계층, IP 주소는 네트워크 계층에서 사용됨
			- MAC 주소는 ARP가 찾아주고 IP 주소는 RARP가 찾아줌



		- Port 번호
			- OS가 관리하는 서버 프로그램 연결 번호 (0 ~ 65535 , 2byte 크기)
				- 0 ~ 1023 : 국제인터넷주소관리기구(ICANN)가 특정 앱으로 미리 예약한 Port
				- 1024 ~ 49151 : 회사에서 구입, 등록하여 사용 가능한 Port
				- 49152 ~ 65535 : OS가 자동 부여하는 동적 Port / 개인목적으로 사용 가능한 Port
				
			- 1대의 컴퓨터에서 다양한 서버(웹 서버, DBMS, FTP 서버 등)프로그램이 동작하고 있는 상황에서 IP 주소로 이 컴퓨터의 네트워크 어댑터(LAN카드)까지 찾아왔다면 이후에 Port 번호로 특정 서버를 선택해서 서비스를 요청할 수 있음



-----------------------------------------------------------------------------

	2. Java에서 IP 주소 얻기

		- 내부(로컬) IP 주소 / 외부(공인) IP 주소 (또는 DNS) 얻기
		- java.net 패키지의 InetAddress 클래스 객체에 IP 주소 주인 이름(도메인)과 IP 주소를 저장함
		
		□□□□ IP 주소 얻는 InetAddress의 정적 메소드 □□□□
		
			- InetAddress.getLocalHost();
			- InetAddress.getByName();
			- InetAddress.getAllByName();
			- InetAddress.getByAddress();
			
				- InetAddress 객체를 new 연산자로 만들 수 없고 항상 위의 getXXX() 메소드로 객체를 생성해야 함
				- InetAddress의 인스턴스 메소드를 사용하려면 위 처럼 객체를 생성한 후 사용 가능
	
	
		
	□□□□ 현재 시스템의 내부(로컬) IP 주소 얻기 □□□□
	
		import java.net.InetAddress
		
		InetAddress ia = InetAddress.getLocalHost();
		
	
	□□□□ 도메인 이름을 알고있는 경우 IP 주소 얻기 □□□□
		
		import java.net.InetAddress
		
		// 하나의 도메인에 하나의 외부 IP 주소만 갖는 경우
		InetAddress ia = InetAddress.getByName(String 도메인이름);
		
		// 또는 하나의 도메인에서 여러 외부 IP 주소를 갖고 잇는 경우
		InetAddress[] iaArr = InetAddress.getAllByName(String 도메인이름);
		
		
		
		# 참고로 윈도우 CMD에서 [tracert 도메인이름] 커맨드를 입력하면 도메인에 연결된 IP주소 한 개를 얻을 수 있음



------------------------------------------------------------------------------------

	# 네트워크 OSI 7계층

		네트워크 기초.hwp 참고
		
-----------------------------------------------------------------------------------

	3. TCP 네트워킹

		- Transmission Control Protocol
		- OSI 4층 (전송계층) UDP/TCP
		- 양방향 연결형 서비스
		- 가상회선 연결 서비스
		- 스트림(패킷)단위 전송
		- 신뢰성 경로 설정 : 신뢰가 보장된 경로를 확정한 후 데이터를 스트림으로 보냄(순서대로), 데이터 손실 X
		- 메시지 전송 감독


	# 자바에서 TCP 네트워킹 (서버 쪽 + 클라 쪽)
	
		- 서버 쪽에서 클라이언트와 연결을 수락, 요청 처리하는 클래스
			- import java.net.ServerSocket;
				- 서버 컴퓨터 IP 주소와 서버 Port 번호 필요
				- accept() 메소드 사용하여 연결 수락 및 통신용 서버 socket 생성
		
		- 클라이언트 쪽에서 연결 및 처리를 요청하는 클래스, 서버-클라 데이터 주고받을 때 사용하는 클래스
			- import java.net.Socket;
			
		
		□□□□ TCP 서버 사용하기 □□□□
		
			// 서버 쪽 (Thread thread = new Thread(){@Override public void run(){}}; 사용권장)
			
			ServerSocket ss = new ServerSocket(Port번호);   // 서버 컴퓨터에 하나의 IP 주소만 있는 경우 방법1
			
			
			ServerSocekt ss = new ServerSocket();   // 서버 컴퓨터에 하나의 IP 주소만 있는 경우 방법2, binding 사용
			ss.bind(new InetSocketAddress(Port번호));
		
		
			ServerSocket ss = new ServerSocket();   // 서버 컴퓨터에 여러 IP 주소가 할당되어있는 경우
			ss.bind( new InetSocektAddress("연결할 특정 IP 주소", Port번호) );   // IP 주소 : "XXX.XXX.XXX.XXX"
		

			# Port 번호가 이미 다른 프로그램에서 사용 중이라면 BindException 발생
			# 다른 Port 번호를 사용하거나 그 프로그램 사용 종료 후 사용하면 해결
			# accept() 메소드를 실행하면 바로 연결이 되는 것이 아니라 클라 쪽에서 연결 요청하기까지 대기함 (블로킹)
			
			
			
			Socket s = ss.accept();    // 서버 accept()는 블로킹, 클라에서 요청해야 비로소 연결 됨
			
			InetSocketAddress isa = (InetSocketAddress) s.getRemoteSocketAddress();    // InetSocketAddress로 강제타입변환 해줘야 함
			String clientIP = isa.getHostName();   // 클라 쪽 IP 주소 얻기
			String clientIP = isa.getHostString();   // 위의 getHostName() 메소드로 IP 주소가 아닌 기기 이름이 출력될 경우 사용
			String portNo = isa.getPort();    //  클라 쪽 Port 번호 얻기
			
			ss.close();   // 서버 소켓 종료, Port 번호 재사용 가능



		□□□□ TCP 클라이언트 사용하기 (서버가 accept()로 블로킹 대기 중인 상태여야 함) □□□□
			
			// 세 가지 방법 중 골라서 사용
			Socket s = new Socket("서버 컴퓨터 IP 주소", Port 번호);   // 서버 컴퓨터의 IP 주소를 알 때 서버에 연결 요청
			
			Socket s = new Socket(InetAddress.getByName("도메인명"), Port 번호);   // 서버의 도메인명만 알 때 서버 연결 요청 방법

			Socket s = new Socket();
			s.connect( new InetSocketAddress("도메인명", Port번호) ); // connect() 메소드를 사용해서 서버에 연결 요청할 수도 있음
			
			
			// 클라 연결 요청 시 UnknownHostException / IOException 예외 발생 가능
			try{
				//연결요청
			}catch( UnknownHostException e){
			
			}catch( IOException e){
			
			}
			
			s.close();  // 클라 쪽에서 연결 해제


		
		- 서버와 클라 소켓이 통신 연결된 후 각 소켓 객체에서 InputStream/OutputStream을 얻을 수 있음

		□□□□ (서버와 클라가 연결된 후) 입출력 스트림으로 데이터 주고 받기 □□□□
		
			// 소켓 만들기 (서버, 클라측 각각 만듦)
			Socket s = new Socket( InetAdress.getByName("도메인명"), Port번호);

			---------------------- 소켓에서 OutputStream 얻기 ----------------------------------
			
			// 소켓에서 OutputStream 얻고 데이터 출력하기 방법 1 (데이터를 바이트 배열로 바꿔주는 작업 필요)
			String data = "보낼 데이터";
			byte[] bytes = data.getBytes("UTF-8");
			OutputStream os = s.getOutputStream();
			os.write(bytes);
			os.flush();


			// 소켓에서 OutputStream 얻고 데이터 출력하기 방법 2 (DataOutputStream 보조 스트림 사용하여 간단하게 작업)
			String data = "보낼 데이터";
			DataOutputStream dos = new DataOutputStream(s.getOutputStream());
			dos.writeUTF(data);
			dos.flush();

			----------------------- 소켓에서 InputStream 얻기 --------------------------------------------

			// 소켓에서 InputStream 얻고 데이터 출력하기 방법 1 (데이터를 바이트 배열로 바꿔주는 작업 필요)
			byte[] bytes = new byte[1024];
			InputStream is = s.getInputStream();
			int num = is.read(bytes);
			String data = new String(bytes, 0, num, "UTF-8");


			// 소켓에서 InputStream 얻고 데이터 출력하기 방법 2 (DataInputStream 보조 스트림 사용하여 간단하게 작업)
			DataInputStream dis = new DataInputStream(s.getInputStream());
			String data = dis.readUTF();


---------------------------------------------------------------

	4. UDP 네트워킹

		- User Datagram Protocol
		- 비 연결형 통신 서비스
		- 신뢰성 X
		- TCP 보다 전송속도 빠름 (영상전송에서 몇 프레임 없어졌다고 영상 수신에 문제가 있는 것은 아니므로 UDP 사용)
		- java.net 패키지에서 DatagramSocket 클래스 (발신,수신 위치)/ DatagramPacket 클래스 (발신,수신 데이터) 제공
		
		
		□□□□ UDP 서버 사용하기 □□□□
		
			DatagramSocket dgs = new DatagramSocket(Port번호);
			
			DatagramPacket receiveP = new DatagramPacket(new byte[1024], 1024);  //(수신데이터 저장할 배열, 수신 가능 최대 바이트 수)
			dgs.receive(receiveP); //데이터 수신 전까지 블로킹, dgs로 데이터가 수신된 경우 dgp에 데이터 담음
			
			// 수신 받은 데이터와 바이트 수 얻기
			byte[] bytes = dgp.getData();
			int num = dgp.getLength();
			
			// 문자열일 경우 String 생성자를 이용하여 문자열 얻기
			String data = new String(bytes, 0, num, "UTF-8");
			
			// UDP 서버에서 클라에게 처리 내용 전송하기
			
			// 보낼 클라 IP주소, Port번호가 저장되어있음
			SocketAddress sa = dgp.getSocketAddress(); 
			
			String data = "처리내용";
			
			// UTF-8 문자열을 문자 하나씩 바이트로 바꿔서 바이트 배열에 담음
			byte[] bytes = data.getBytes("UTF-8"); 
			
			// (바이트 배열, 시작 인덱스, 보낼 바이트 수, 보낼 socketAdrress)
			DatagramPacket sendP = new DatagramPacket(bytes, 0, bytes.length, sa);

			// 패킷 데이터를 클라로 전송
			dgs.send(sendP); 
			
			//UDP 서버 종료
			dgs.close();

		
		
		□□□□ UDP 클라이언트 사용하기 □□□□
		
			






