

1. 람다식에 대한 설명으로 틀린 것은?
	- 람다식은 함수형 인터페이스의 익명 구현 객체를 생성한다
	- 매개변수가 없을 경우 () -> {...} 형태로 작성한다
	- (x,y) -> {return x+y;} 는 (x,y) -> x+y 간단한 형태로 바꿀 수 있다
	- @FunctionalInterface가 기술된 인터페이스만 람다식으로 표현 가능하다 (X)
	
	# 추상메소드가 하나인 인터페이스는 모두 함수형 인터페이스이고 람다식으로 표현가능함. 컴파일시 자동 어노테이션 적용 되므로 기술하지 않아도 됨
	

2. 메소드 참조와 생성자 참조에 대한 설명으로 틀린 것은 무엇인가?
	- 메소드 참조는 함수적 인터페이스의 익명 구현 객체를 생성한다
	- 인스턴스 메소드는 "참조변수 :: 메소드" 로 기술한다
	- 정적 메소드는 "클래스 :: 메소드" 로 기술한다
	- 생성자 참조인 "클래스 :: new"는 매개변수가 없는 디폴트 생성자만 호출한다 (X)
	
	
	# 메소드 참조 필요 요소 = 함수형인터페이스, 인터페이스 타입 매개변수를 갖는 메소드, 인터페이스의 추상메소드가 재정의하고싶은 메소드 및 그 메소드를 갖는 클래스
	
	# 클래스 :: 정적 메소드
	# 객체(클래스참조변수) :: 인스턴스 메소드
	# 클래스 :: 인스턴스 메소드
	
	# 생성자 참조 필요 요소 = 객체가 만들어질 클래스 및 생성자
	
	# 매개변수로 객체만 생성하여 리턴하는 경우
		(a,b)->{return new 클래스명(a,b)};
		
		아래의 참조 람다식으로 대체 가능
		클래스명 :: new
		


3. 다음 중 잘못 작성된 람다식은?

	- a -> a+3
	- a,b -> a*b (X)
	- x -> System.out.println(x/5)
	- (x, y) -> Math.max(x,y)

	
	# 매개변수가 하나일 때 () 생략 가능하고 타입이나 var 작성 없이 변수만 씀, 실행문은 한줄의 코드면 {} 생략 가능
	
	
	
	