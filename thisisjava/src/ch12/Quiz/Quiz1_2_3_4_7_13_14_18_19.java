package ch12.Quiz;

public class Quiz1_2_3_4_7_13_14_18_19 {

}

/*
 
 1. API 도큐먼트에 대한 설명으로 틀린 것은?
 	- 자바 표준 라이브러리를 프로그램에서 어떻게 사용할 수 있는지를 설명함
 	- 클래스의 상속 관계 및 자식 클래스들이 무엇인지 확인할 수 있음
 	- 생성자 선언부, 필드의 타입, 메소드의 선언부를 확인할 수 있음
 	- public, protected, default, private 접근 제한을 가지는 멤버들을 확인할 수 있음 (X)
 	
 	#private 접근제한자는 각 API 내에서 사용하기 때문에 사용자가 알 필요도 없고 알 수도 없음
 
 --------------------------------------------------------------------------------
 
 2. java.base 모듈에 대한 설명으로 틀린 것은?
 	- 모든 표준 모듈이 의존하는 기본 모듈이다
 	- 모듈 기술자에 requires를 하지 않아도 사용할 수 있는 모듈이다 (유일, 나머지는 모두 requires 필요)
 	- java.base의 패키지에는 java.lang java.util java.io java.net java.sql 등이 있다 (X)
 	- java.lang 패키지를 제외한 다른 패키지는 import 문을 필요로 한다
 	
 	
 	java.base 패키지	(base 모듈은 유일하게 requires 없이 사용 가능)
 		java.lang	(import 없이 사용 가능, 자바언어 기본 클래스 모듈 제공)
 		java.util
 		java.text
 		java.time
 		java.io
 		java.net
 		java.nio
 
 -----------------------------------------------------------------------------------
 
 3. Object 클래스에 대한 설명 중 틀린 것은?
 	- 모든 자바 클래스의 최상위 부모 클래스이다
 	- Object의 equals() 메소드는 == 연산자와 동일하게 번지를 비교한다 (참고. 객체타입이 아닌 일반 타입은 ==로 데이터 비교)
 	- Object의 hashCode() 메소드는 동등 비교 시 활용된다
 	- Object의 toString() 메소드는 객체의 필드값을 문자열로 리턴한다 (X)
 	
 	# 클래스명@16진수해시코드를 문자열로 리턴함
 	
----------------------------------------------------------------------------------
 	
 4. 객체의 동등 비교를 위해 Object의 equals()와 hashCode() 메소드를 오버라디이 했다고 가정할 경우,
 	메소드 호출 순서를 생각하고 다음 [ ] 안을 채워라
 	
 			 		  같음			 		 true
 	[ hashCode() ] 리턴값 ━━→ [ equals() ] 리턴값 ━━→ 동등 객체
 		┃						┃
 	 	┃다름						↓false
 		┗━━━━━━━━━━━━━━━━━━→ 다른 객체
 		
 ----------------------------------------------------------------------------
 
 7. System 클래스에 대한 설명 중 틀린 것은 무엇입니까?
 	- System 클래스는 정적 필드와 정적 메소드만 제공함
 	- System.out은 콘솔에 출력할 때, System.in은 키보드에서 입력받을 때 사용함
 	- milisTime()과 nanoTime() 메소드는 현재 시간에 대한 long값을 리턴함 (X)
 	- exit() 메소드는 프로세스(JVM)을 종료시킴
 		
 	# long 타입  currentTimeMillis() (10^-3), nanoTime() (10^-9)
 	

--------------------------------------------------------------------------------

 13. Math 클래스가 제공하는 메소드의 리턴값이 잘못된 것은 무엇인가?
 	- Math.ceil(5.3)		→ 6.0
 	- Math.floor(5.3)		→ 5.0
 	- Math.max(5.3, 2.5)	→ 5.3
 	- Math.round(5.7)		→ 6.0	(X)
 	
 	# Math.round() 는 반올림하여 int형으로 리턴함
 	
 -------------------------------------------------------------------------
 
 14. 난수 얻는 방법이 잘못 된 것은?
 	- Math.random() 메소드는 0.0 <= x < 1.0 사이의 실수 난수를 리턴한다
 	- Random의 nextDouble() 메소드는 0.0 <= x < 1.0 사이의 실수 난수를 리턴한다
 	- Random의 nextInt() 메소드는 int 타입의 허용 범위에서 난수를 리턴한다
 	- Random의 nextInt(int n) 메소드는 0<= x <=n 사이의 정수 난수를 리턴한다 (X)
 	
 	# 0<= x < n 임
 	
 	
 	 Math 클래스 
 	- 수학 계산을 용이하게 하는 기능 제공
 	- import 없이 사용 가능
 	- 모든 기능 static이라 객체 생성없이 바로 사용 가능
 
 
 주요기능
 	- Math.abs(음수)				: 절대값 리턴
 	
 	- Math.ceil(소수)				: 올림값 리턴
 	- Math.floor(소수)			: 버림값 리턴
 	- Math.round(수)				: 반올림값 리턴
 	 	
 	- Math.max(수1, 수2)			: 비교 후 큰 수 리턴
 	- Math.min(수1, 수2)			: 비교 후 작은 수 리턴
 	
 	- Math.random()				: 0~1 사이의 double 타입 랜덤 수 리턴




java.util.Random 클래스
	- boolean, int, double 난수 쉽게 생성 가능
	- Random([시드]); //시드가 같으면 같은 난수 생성
	- 메소드
		- nextBoolean()			: true, false 리턴
		- nextDoulbe()			: (0.0 <= x < 1.0) 리턴
		- nextInt()				: (-2^32 <= x <= 2^32-1) 리턴
		- nextInt(int n)		: (0 <= x < n) 리턴

시드란?
	- 컴퓨터는 결정적 유한 오토마타 형태로서 난수(랜덤값)을 출력할 수 없다.
	- seed 씨앗이라는 의미로, 난수를 비슷하게 출력할 수 있도록 해주는 값. 기본값은 보통 현재 시간을 시드로 사용
	


--------------------------------------------------------------------------------------

 18. Class 객체에 대한 설명 중 틀린 것은 무엇?
 	- Class.forName() 메소드 또는 객체의 getClass() 메소드로 얻을 수 있다
 	- 패키지와 클래스 이름을 알 수 있다
 	- 클래스의 생성자, 필드, 메소드에 대한 정보를 알아낼 수 있다
 	- getResource() 메소드는 프로젝트 경로를 기준으로 리소스의 URL을 리턴한다 (X)
 	
 	# getResource() 메소드는 .class 파일의 경로를 기준으로 리소스의 URL을 리턴함
 	
---------------------------------------------------------------------------------------

 19. 어노테이션(Annotation)에 대한 설명 중 틀린 것은?
 	- 컴파일하거나 실행할 때 어떻게 처리해야 할 것인지를 알아주는 역할을 한다
 	- 클래스, 필드, 생성자, 메소드를 선언하기 전에 @어노테이션이름 을 붙일 수 있다
 	- @어노테이션이름("*")일 경우 value() 속성값이 *이 된다
 	- @어노테이션이름("*", prop = 3) 일 경우 value 속성값은 * prop 속성값은 3이 된다 (X)
 	
 	# 여러 속성값을 저장하거나 변경하기 위해선 value()라도 속성명을 명시해줘야 함
 		@어노테이션이름(value = "*", prop = 3);
 
 
 */





