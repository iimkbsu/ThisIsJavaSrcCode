 java.base 모듈과 하위 패키지
 
 <java API 다큐먼트>
 https://docs.oracle.com/en/java/javase/
 
 
 API(Application Programming Interface)
 	- 앱을 프로그래밍 할 때 서로 연결하여 상호작용 할 수 있도록 기능 및 데이터를 제공하는 매개체
 	- 기본 제공 API와 사용자 배포 API가 있음
 
 java.base 모듈
 	- 모든 모듈이 의존하는 모듈, 유일하게 requires 하지 않고 사용가능
 	- 모듈에 속하는 주요 패키지
 		- java.lang (자바 언어 기본 클래스 제공, 유일하게 import없이 사용가능)
 		- java.util (자료구조 관련 컬렉션 클래스 제공)
 		- java.text (날짜, 숫자를 원하는 형태 문자열로 만들어 주는 포맷 클래스 제공)
 		- java.time (날짜, 시간을 조작 및 연산하는 클래스 제공)
 		- java.io (입출력 스트림 클래스 제공)
 		- java.net (네트워크 통신 관련 클래스 제공)
 		- java.nio (데이터 저장 buffer 및 새로운 입출력 클래스 제공)
 
 --------------------------------------------------------------------------------------		
 		
 Object 클래스
 	- 모든 자바 클래스는 Object 클래스를 상속받음 (extends 없을경우 자동으로 java.lang.object 상속받게 됨)
 	- 주요 메소드
 		- boolean equ민(Object obj)
 		- int hashCode()
 		- String toString()
 
 
  Object 클래스 제공 equals() 메소드
  - 참조 주소 비교 (true/false) ( == 와 같은 기능)
  
  Object 클래스 제공 toString() 메소드
  toString() : 객체(Object)의 데이터를 문자열로 가져옴 (구성 : 클래스명@16진수해시코드)
 
  
 -------------------------------------------------------------------------------------
 
 String 클래스의 equals() 메소드는 재정의 매소드(Overriding)
 	- 내용 비교 (true/false)
 
 String 클래스의 equals() 처럼 보통 내용을 비교하기 위해 매소드를 재정의 하여 사용한다
 
 
 ---------------------------------------------------------------------------------------


 
 
 
 해시코드 : 객체의 동등성 비교, 객체의 주소값 int로 가지고옴
 보통 재정의 하여 사용
 
 
 hashCode() : false면 서로 다른 객체, true면 equals()가 true일 경우 동등 객체
 
 HashSet 컬랙션 : hashCode()와 equals()가 재정의 되어있는 클래스. 동등객체(여기서는 학생 번호와 학생 이름이 같다고 정의)일 경우 중복을 허용하지 않음
 
 java.util.HashSet
 
 
 ------------------------------------------------------------------------------------------
 
 
  			자바코드
 			 ↓
 			JVM
 			 ↓
 	┌━━━━━━━━┰━━━━━━━┐
 windows	Mac		리눅스	
 
 
 System 클래스 : 자바코드는 JVM이 실행하기 때문에 각 OS의 기능들을 사용할 수 없는 단점이 있음. 이를 system클래스가 몇몇 OS 기능들을 사용할 수 있게 해줌
 	- (필드) System.out  : 콘솔 문자 출력 (흰색으로 출력됨)
 	- (필드) System.in   : 키보드 입력
 	- (필드) System.err  : 콘솔 에러 출력 (빨간색으로 출력됨)
 	
 	- (메소드) System.exit(int @)				: 프로세스 종료
 	- (메소드) System.currentTimeMillis()		: 현재시간 밀리초단위 long 값 리턴
 	- (메소드) System.nanoTime()				: 현재시간 나노초단위 long 값 리턴
 	- (메소드) System.getProperty()			: 운영체제 사용자 정보 제공
 	- (메소드) System.getenv()				: 운영체제 환경변수 정보 제공
 	- 등등
 
 ---------------------------------------------------------------------------------------------------
  프로세스 : 
 	OS는 실행할 프로그램을 장기저장공간(디스크)에서 기억장치(메모리)로 옮겨오고 이를 CPU에서 연산하는 과정을 통해 실행하는데 이를 프로세싱이라 한다.
 	cpu에 올려져 있는 실행중인 프로그램을 프로세스라 한다.
 
 프로세스 강제종료 : System.exit(int 값); //정상종료 : a에 0값 비정상종료 : 1 or -1값
 //예전에는 이 값에 따라 다른 행위를 하도록 코딩했었는데 지금은 안 함.
 
 
 ------------------------------------------------------------------------------------------------------
  properties : 속성
 

 시스템 프로퍼티 : 자바 언어로 쓰여진 코드가 OS위에서 JVM을 통해 실행될 때 자동으로 설정되는 시스템 속성
 	- OS 종류, 사용자 정보, 자바 버전 등
 	
 사용법
 	- import java.util.Properties;
 	- System.getProperty("키 문자열");
 	
 	전체 속성
 	- Properties myprops = System.getProgerties();
 
 종류(키)
 	- java.specification.version		자바 버전
 	- java.home							JDK의 디렉토리 경로
 	- os.name							OS 이름
 	- user.name							사용자 이름
 	- user.home							사용자 홈 디렉토리 경로
 	- user.dir							현재 디렉토리 경로
 
 ---------------------------------------------------------------------------------------------
 
 System.in : 키보드 입력 필드
 
 int keyCode = System.in.read();
 키보드에서 엔터키로 구분하여 하나씩 입력된 키 값의 아스키코드를 정수형으로 저장.
 
 <아스키코드>
 엔터키 = 10, 13 동시에 들어옴 (윈도우)
 엔터키 = 10 (맥)
 
 0 = 48
 
 A = 65
 Z = 90
 
 a = 97
 z = 122
 
 ------------------------------------------------------------------------------------------------
 
 진행 시간 읽기 : 성능측정 척도, 프로세스 처리 완료 시간 확인
 
 1970년 1월 1일 0시부터 시간 측정되고 있음.
 
 long 타입  currentTimeMillis() (10^-3), nanoTime() (10^-9)
 
 ---------------------------------------------------------------------------------------------------
 
  문자열 관련 클래스
 
 	String				- 문자열 저장 및 기본 조작 클래스 (String으로 한 번 들어온 데이터는 못 바꿈)
 	StringBuilder		- 효율적인 문자열 조작 기능으로 문자열 완성해 나가는 클래스 (StringBuilder는 데이터 조작 가능)
 	StringTokenizer		- 토큰(구분자)으로 연결된 문자열 분리할 때 사용 클래스
 
 
 
 
 String 클래스 : 문자열 저장, 조작할 때 사용, 문자열 리터럴은 자동으로 String 타입 객체로 생성됨, String 클래스에 다양한 생성자를 사용하여 직접 객체 생성 가능
 
 	- byte[] → 문자열  (네트워크 통신시 사용)
 		String str = new String(byte[] bytes);
 		
 		String str = new String(byte[] bytes, String charsetName); 	(서로 기능 같음)
 		String str = new String(byte[] bytes, String charset); 		(서로 기능 같음)
 		
 		
 		
 	- 문자열 → byte[]  (네트워크 통신시 사용)
 		byte[] bytes = str1.getBytes();
 		byte[] bytes = str1.getBytes("유니코드이름");
 		
 
 OS에 따라 바이트 인코딩, 디코딩 유니코드가 다름
 	mac = (고정) UTF-8
 	windows = (default) MS944(= EUC-KR)
 	
 	
 	  String 클래스 메소드 종류
  	- str.charAt(인덱스) 									: 인덱스 문자 리턴
  	- str.replace("포함문자열", "바꿀문자열") 					: 문자열 교체
  	- str.length(); 									: 문자열 길이 리턴	(참고로 배열은 배열.length 임)
  	- str.substring(시작인덱스, [끝인덱스]) 					: 시작부터 끝 인덱스 전까지 잘라서 리턴 (없으면 끝까지)
  	- str.indexOf("찾을문자열") 							: 기존 문자열에서 "찾을문자열"을 찾아 처음 인덱스 리턴
  	- str.split(" ") 									: " "로 문자열 자르고 String[]에 리턴
  	등등
  	
  	
  	 String의 split() 메소드
 	- 정규 표현식으로 구분하여 쪼갬
 	- 단일 구분자, 다수 구분자를 정규표현식으로 받아서 자를 수 있음
 
 예. 
 String str = "홍길동&이수홍, 박연수, 김자바-최명호";
 String[] names = str.split("&|,|-");
 	
 	
 	
 	
 	
 	
 	 StringBuilder
 	- 문자열 조작 가능. 문자열 길이도 조정 가능 (String은 초기화 하면 길이 조정 불가), import 필요 없음
 
 장점
 	- String 처럼 객체를 새로 생성하지 않고도 버퍼를 사용하여 String 조작이 가능
 	
 StringBuilder 클래스의 메소드 종류
 	- append("추가문자열") 						: 기존 문자열 뒤에 "추가문자열" 추가
 	- insert(인덱스, "삽입문자열") 				: 지정된 인덱스에 "삽입문자열" 삽입
 	- delete(시작인덱스, 끝인덱스) 				: 시작~끝 전 인덱스까지 삭제
 	- replace(시작인덱스, 끝인덱스, "교체문자열") 	: 시작~끝 전 인덱스까지 "교체문자열"로 교체
 	등등
 	
 
 
 메소드 체이닝 패턴
 	- StringBuilder 타입으로 객체 생성하면 나중에 결국 String 타입에 저장하여 String으로 사용해야 하는데
 	- 이를 메소드 체이닝 패턴을 사용하여 처음부터 String 타입으로 StringBuilder 객체를 만들고 메소드를 간편하게 사용한 후 마지막에 .toString()으로 마무리
  
 
 
 
 
 
 
 
 StringTokenizer(문자열, ["구분자"])
 	- String을 token(문자)으로 쪼개서 사용하기 위한 클래스
 	- import 필요
 	- 구분자 없을경우에는 공백으로 구분함
 	- 단일 구분자일 경우에 사용
 
  
 StringTokenizer(문자열 ,[""]) 클래스의 메소드 종류
 	- countTokens()			- 토크나이저에 남아있는 분리 가능한 문자열 개수 리턴 (int)
 	- hasMoreTokens()		- 남아 있는 토큰(문자열) 존재 여부 리턴 (t/f)
 	- nextToken()			- 문자열(토큰) 차례대로 하나씩 빼서 리턴 (String) -> countTokens() 리턴값이 줄어듦
 	
 	
 
 예.
 String str1 = "홍길동/이수홍/박연수/김자바/최명호";
 StringTokenizer = new StringTokenizer(str1, "/");
 
 
 
 ---------------------------------------------------------------------------------------------------
  포장 클래스(Wrapper class)
 	-  컬랙션 객체 때문에 래퍼 클래스 사용함 (기본 타입의 값은 저장이 안 되는데, 객체는 저장이 가능해서)
 
 
 자동 Boxing 과 UnBoxing
 	- 포장 클래스 타입으로 값을 저장할 때 Boxing이 발생해 포장 객체가 된다.
 	- 포장 객체에서 기본 타입으로 값을 저장할 때 UnBoxing이 발생하여 기본 타입 변수에 저장됨.
 
 
 
 
 기본타입				포장 클래스
 
 int				Integer
 char				Character
 
 short				Short
 byte				Byte
 long				Long
 float				Float
 double				Double
 boolean			Boolean
 
 
 
 포장 값 비교
 	- 객체의 값 자체 비교 : equals()
 	- 객체 참조 비교 : ==, !=
 	
 	- 객체 생성 없는 값 자체비교 : ==, !=
 	
 	
 참고
 	- 포장 값이 일정 범위 안에 있으면 같은 객체 참조하므로 equals() 메소드도 true를 반환함
 
 
 같은 객체 참조 범위
 	- boolean (true, false)
 	- char (\u0000 ~ \u0071)
 	- int, byte, short (-128 ~ 127)
 	
 -----------------------------------------------------------------------------------
 
 
 Math 클래스 
 	- 수학 계산을 용이하게 하는 기능 제공
 	- import 없이 사용 가능
 	- 모든 기능 static이라 객체 생성없이 바로 사용 가능
 
 
 주요기능
 	- Math.abs(음수)				: 절대값 리턴
 	
 	- Math.ceil(소수)				: 올림값 리턴
 	- Math.floor(소수)			: 버림값 리턴
 	- Math.round(수)				: 반올림값 리턴
 	 	
 	- Math.max(수1, 수2)			: 비교 후 큰 수 리턴
 	- Math.min(수1, 수2)			: 비교 후 작은 수 리턴
 	
 	- Math.random()				: 0~1 사이의 double 타입 랜덤 수 리턴




java.util.Random 클래스
	- boolean, int, double 난수 쉽게 생성 가능
	- Random([시드]);
	- 메소드
		- nextBoolean()			: true, false 리턴
		- nextDoulbe()			: (0.0 <= x < 1.0) 리턴
		- nextInt()				: (-2^32 <= x <= 2^32-1) 리턴
		- nextInt(int n)		: (0 <= x < n) 리턴

시드란?
	- 컴퓨터는 결정적 유한 오토마타 형태로서 난수(랜덤값)을 출력할 수 없다.
	- seed 씨앗이라는 의미로, 난수를 비슷하게 출력할 수 있도록 해주는 값. 기본값은 보통 현재 시간을 시드로 사용
 
 
 ---------------------------------------------------------------------------------------------------
 
 java.util.Date 클래스				: 날짜 정보 저장 및 전달하기 위한 클래스 (단순 전달)
 java.util.Calendar 클래스 			: 다양한 시간대별로 날짜와 시간을 얻어야 할 때 사용 클래스 (사용자가 확인하기 위해)
 java.time.LocalDateTime 클래스		: 날짜 시간 조작 클래스 (조작)
 
 
 
 Date 타입 객체의 현재 날짜와 시간 데이터 출력이 마음에 들지 않는다면
 SimpleDateFormat 클래스를 이용하여 표현방식을 바꿀 수 있다.
 
 SimpleDateFormat sdf = new SimpleDateFormat("포맷");
 sdf.format(Date 객체)
 
  SimpleDateFormat 클래스
 	- 날짜를 형식화된 문자열로 변환하는 기능 제공
 	- 패턴문자열을 매개변수로 하는 SimpleDateFormat 생성자를 사용하여 객체를 만들어서 사용
 	- Date 클래스의 객체를 만들어서 현재 날짜시간 데이터를 받은 후 사용
 	
 패턴문자
 	- Y		: 년
 	- M		: 월
 	
 	- d		: 일(1~28,29,30,31일)
 	- D		: 일(1~365일)
 	
 	- E		: 요일
 	
 	- a		: AM,PM
 	
 	- w		: 년의 몇 째주
 	- W		: 월의 몇 째주
 	
 	- H		: 0~23시
 	- K		: 0~11시
 	
 	- h		: 1~12시
 	- k		: 1~24시
 	
 	- m		: 분
 	
 	- s		: 초
 	- S		: 밀리초(1/1000)
 	
 	
 
 
 
 
 Calendar 추상 클래스
 	- static 메소드인 getInstance() 메소드를 이용하여 기본적인 컴퓨터 상 시간대를 사용하는 하위 객체를 얻을 수 있음 ( Calendar myCal = Calendar.getInstance(); )
 	- 특별한 역법은 자식클래스에서 구현하도록 구성되어있음
 	- get() 메소드를 이용하여 날짜 및 시간에 대한 정보 얻을 수 있음 (int 형 반환)
 	
 종류
 	- myCal.get(Calendar.YEAR);
 	- myCal.get(Calendar.MONTH) + 1;
 	- myCal.get(Calendar.DAY_OF_MONTH); == myCal.get(Calendar.date);
 	- myCal.get(Calendar.AM_PM);
 	- myCal.get(Calendar.HOUR);
 	- myCal.get(Calendar.MINUTE);
 	- myCal.get(Calendar.SECOND);
 	
 	
 	
 
 날짜 시간 비교
 LocalDateTime 클래스에는 날짜 시간 비교 메소드도 있다
 	- .isAfter()			: 이후 날짜인지? (boolean)
 	- .isBefor()			: 이전 날짜인지? (boolean)
 	- .isEqual()			: 같은 날짜인지? (boolean)
 	
 	- .until(,단위)			: 주어진 단위 차이를 리턴 (long)
 
 
 날짜 시간 조작하기
 LocalDateTime final클래스 (공개 생성자가 없으므로 객체 리턴 메소드 사용해야 함)
 
 
 
 다른 지역의 시간을 갖고오기
 	-TimeZone 추상 클래스의 상속 객체를 얻어 오버로딩 된 Calendar 추상 클래스의 .getInstance()를 이용하여 매개값으로 넘겨주면 된다.
 	
 사용방법
 TimeZone timeZone = TimeZone.getTimeZone("America/Los_Angeles");
 Calendar now = Calendar.getInstance(timeZone);
 
 
 TimeZone의 국가 id는 문자열 배열에 저장 
 
 ---------------------------------------------------------------------------------------------------
 
  java.text.DecimalFormat 클래스
 	- Decimal : 십진법
 	- new 연산자로 객체 생성 후 객체 매개변수로 "기호패턴 문자열" 사용
 		
 		공란					: 세자리 마다 "," 표기
 		"0" 				: 10진수 표기, 빈자리 0으로 채움
 		"#" 				: 10진수 표기, 빈자리 채우지 않음
 		"." 				: 소수점
 		"+ 또는 -" 			: 양수 음수 기호
 		"E"					: 지수문자 (예, 1.2E4 : 1.2*10^4)
 		";"					: 양수일 때 음수일 때 모두 표기하고 싶을 때 패턴 구분자
 		"%"					: % 표기
 		"\u00A4				: 통화기호 ￦
 		

-------------------------------------------------------------------------------------------------

 정규표현식(RegExp)
 	- 프로그래밍 언어의 문자열을 다룰 때 특정한 규칙을 가진 문자열로 표현하기 위한 규칙
 	- 임의 input 문자열이 규칙대로 구성되어있는지 확인하기 위한 검증 식
 	
 	- JS,TS,루비 등 에서는 기본 문법으로 제공
 	- java, 파이썬, C++ 등 에서는 클래스(라이브러리)형식으로 제공
 	
 
 표현방법
	\			이스케이핑(escaping)
	\d			일치. 한 개의 숫자			== [0-9]
	\s			공백
	\w			일치. 한 개의 숫자 또는 문자	== [0-9_a-zA-Z]
	\.			.(점)
	
	^			범위. 시작 지점
	$			범위. 끝나는 지점
	
 	*			수량. 없거나 하나 이상 		== {0,}
	+			수량. 하나 이상 			== {1,}
	?			수량. 없거나 하나이다.
	
	.			일치. 모든 문자 중 하나와 일치
	(x)			일치. x와 일치하는 것을 찾은 후에 접근 (묶을 때 사용)
	x|y			일치. x또는 y
	
	{n}			수량. 딱 n개
	{n,}		수량. 최소 n개
	{n,m}		수량. n개부터 m개까지
	
	t{n}		수량. t와 n번 일치하는 문자열
	t{n,}		수량. t와 n번 이상 일치하는 문자열
	t{n,m}		수량. t와 n번 이상 m번 이하로 일치하는 문자열
	
	[xyz]		일치. xyz중에 하나라도 일치하는 문자
	[^xyz]		일치. xyz이외의 하나와 일치하는 문자
	[a-zA-z]	일치. a~z,A~Z중 하나라도 일치하는 문자
	
	
	예. 
	
	010-1234-4567 이나 02-122-1212 와 같은 전화번호 형식을 위한 정규표현식
	
	{02|010}-\d{3,4}-\d{4}
	
	
	
	programmer@program.net 이나 engineer@factory.com  또는 aas@yahoo.co.kr 과 같은 이메일 형식을 위한 정규표현식
	
	\w{1,}@\w{1,}(\.\w{1,})?
	
	\w+@\w+(\.\w+)?
	
	
	
java에서의 정규표현식 검증

	- java.util.regex 패키지의 Pattern 클래스에서 제공하는 matches() 메소드 사용
	
	- matches("정규식", "검증문자열") (true/false 리턴)
	
	
	


-------------------------------------------------------------------------------------------------------

 리플랙션
 	- 자바의 클래스나 인터페이스(추상클래스)의 메타정보(패키지, 멤버, 타입 정보 등)를 프로그램을 통해 읽고 수정하는 행위
 	
 	- 클래스 정보 얻기
 		- Class myClass = 클래스명.class;								: 클래스 자체에서 얻기
 		- Class myClass = Class.forName("패키지.패키지...클래스명");		: 클래스 자체에서 얻기
 		
 		- Class myClass = 클래스참조객체.getClass();						: 클래스를 참조하는 객체로부터 얻기
 		
 
 	- 패키지 및 타입 정보 얻기
 		- 클래스정보.getPackage();			: 패키지 정보 읽기 (Package 타입)
 		- 클래스정보.getSimpleName();		: 패키지 제외한 타입 이름 (String 타입)
 		- 클래스정보.getName();				: 패키지 포함 전체 타입 이름 (String 타입)
 		
 	
 	- 맴버(생성자, 필드, 메소드) 정보 얻기 (import java.lang.reflect.*)
 		- 클래스정보.getDeclaredConstructors()		: 생성자 정보 읽기 (Constructor[] 타입) (.getParameterTypes()으로 매개변수 받고 printParameters()로 출력)
 		- 클래스정보.getDeclaredFields()			: 필드 정보 읽기 (Field[] 타입) 
 		- 클래스정보.getDeclaredMethods()			: 메소드 정보 읽기 (Method[] 타입) (.getParameterTypes()으로 매개변수 받고 printParameters()로 출력)
 		
 			*Declared는 '선언된' 이라는 뜻인데 사용자 선언 말고 자동 선언된 생성자도 포함임
 
 	
 	
 	- 리소스 경로 얻기 (이미지, xml, 프로퍼티 등 리소스의 경로)
 		- 클래스정보.getResource(String 리소스이름);					: 리소스 파일의 URL(경로) 리턴 (URL 타입)
 		- 클래스정보.getResource(String 리소스이름).getPath();			: 리소스 파일의 URL을 문자열 경로로 리턴 (String 타입)
 		- 클래스정보.getResourceAsStream(String 리소스이름);			: 리소스 파일의 InputStream(파일데이터)을 리턴 (InputStream 타입)
 		
 		
 			* 리소스 위치
 			 	- bin 폴더의 해당 클래스(.class)가 위치한 폴더
 		
 			* 자바 Stream (자세한 건 18장에서)
 				- 외부로 데이터를 가져오거나 보내는 흐름. 또는 그 흐름의 통로
 				- 다양한 데이터 소스를 표준화된 방법으로 다루기 위해 도입됨 (Set, List, Map 등의 사용법을 표준화시킴)
 				
 			* input/output Stream
 				- 바이트 기반 입출력 스트림의 최상위 추상 클래스
 				
 				
 
 
 ---------------------------------------------------------------------------------------------------
 
 어노테이션 (웹 어플리케이션을 개발할 때 스프링 프레임워크에서 많이 사용)
 	- @어노테이션이름
 	- 클래스 또는 인터페이스를 컴파일, 실행 할 때 어떤 처리를 거쳐야 하는지 설명하는 설정 정보.
 	- 용도
 		- 컴파일 시 사용하는 정보의 전달		(RetentionPolicy.SOURCE)									: 예. @Override
 		- 빌드 툴이 코드를 자동으로 생성할 떄, 메모리에 저장할 때 사용하는 정보를 전달	(RetentionPolicy.CLASS)		: 예. 롬복의 @Data
 		- 실행 시 특정 기능을 처리할 때 사용하는 정보를 전달	(RetentionPolicy.RUNTIME)
 		
 	- 자바 기본제공 어노테이션
 		- @Override					: 컴파일러에게 메소드를 오버라이딩한다고 알려줌으로써 제대로 재정의 했는지 검사하게 함
 		- @Deprecated				: 앞으로 사용하지 않음을 알림 (버전이 바뀔 때)
 		- @FunctionalInterface		: 함수형 인터페이스라고 알림
 		- @SuppressWarning			: 컴파일러가 경고 메시지를 출력하지 않음
 		- @SafeVargrs				: 제네릭과 같은 가변인자의 매개변수를 사용할 때 경고 나타내지 않음
 		
 	- 메타 어노테이션 (어노테이션을 정의하는 어노테이션, 어노테이션에 추가로 붙는 어노테이션)
 		- @Target({타입열거})				: 어노테이션 적용 대상 정의
 		- @Documented					: javaDoc 문서에 어노테이션 정보 포함시킴
 		- @Inherited					: 어노테이션을 하위 클래스에 상속시킴
 		- @Retention({타입})				: 어노테이션 유지 기간 설정 (=어노테이션 작동 시점 설정)
 		- @Repeatable					: 어노테이션 반복 적용
 	
 	- 사용자 정의 어노테이션
 		- 롬복
 			- @Data						: 롬복 라이브러리에서 정의된 getter setter toString 등의 메소드를 자동으로 불러오는 어노테이션 (아래 내용 모두 포함)
 			- @ToString					
 			- @Getter
			- @Setter
			- @NoArgsConstructor
			- @AllArgsConstructor
 	
 	
 	- 인터페이스 선언 방법
 		- [public] interface 인터페이스이름 {}
 		
 	- 어노테이션 정의(선언)방법
 		- public @interface 어노테이션이름 {}
 		
 	- 어노테이션 사용방법
 		- @어노테이션이름[(속성=속성값)]
 		
 	
 	
 	
 	
 예. 
 
 <어노테이션 선언 후 속성 부여>------------------------------------------------------
 
 public @interface MyAnnotation {
 	
 	String 속성이름1();				: 속성이름1의 String 타입 속성, 기본값 없음
 	int 속성이름2() default 1;			: 속성이름2의 int 타입 속성, 기본값 1
 	
 }
 
 
 
 <어노테이션 사용>-----------------------------------------------------------------
 
 @MyAnnotation(이름1 = "문자열");				: 정상작동. 이름2는 default 값 1이 있어서 기술 없이 사용 가능
 @MyAnnotation(이름2 = 3);					: 오류남. 이름1의 default 값이 없어서 반드시 초기값 기술해줘야 함
 @MyAnnotation(이름1 ="문자열", 이름2 = 3);		: 정상 작동.
 	
 	
 	
 <어노테이션 기본 속성 value()>-------------------------------------------------------
 
 public @interface MyAnnotation2 {
 	
 	String value();			: 기본 속성. 사용할 때 속성이름 없이 값만 넣어 사용 가능
 	int 속성이름() default 1;
 
 }
 
 
 
 <기본속성 어노테이션 사용>-------------------------------------------------------------
 
 @MyAnnotation2("문자열");						: 기본속성 String value()로 되어있기 때문에 속성이름 없이 값만 줄 수 있음
 @MyAnnotation2(value = "문자열", 속성이름 = 3);		: 단, 다른 속성 값을 동시에 줄 경우에는 value 표기해줘야 함
 
 
 
 <어노테이션 적용 대상>------------------------------------------------------------
 
 ElementType 열거상수					적용요소
 
 	TYPE							클래스, 인터페이스, 열거타입
 	ANNOTATION_TYPE					어노테이션
 	FIELD							필드
 	CONSTRUCTOR						생성자
 	METHOD							메소드
 	LOCAL_VARIABLE					로컬변수
 	PACKAGE							패키지
 	
 
 <어노테이션 적용 방법>----------------------------------------------------------
 
 어노테이션 생성시 맨 위에 적용대상을 @Target()으로 명시한 후 어노테이션을 적용할 코드 선언부 앞에 @어노테이션이름으로 작성
 
 //어노테이션 선언
  
 @Target( { ElementType.Type, ElementType.FIELD, ElementType.METHOD } )
 public @interface myAnnotation {
 
 	String str() default "문자열";
 	int value();
 	
 }
 
 
 //어노테이션 적용 (생성자는 target 설정하지 않았으므로 어노테이션 적용을 할 수 없음)
  
  @myAnnotation
  public class myClass{
  	
  	@myAnnotation
  	private String myField;
  	
  	public myClass(){
  	}
  	
  	@myAnnotation
  	public void myMethod(){
  	}
  	
  }
  
 
 <어노테이션 유지 정책>----------------------------------------------------------
 
 RetentionPolicy 열거상수				어노테이션 적용 시점					어노테이션 제거 시점
 
 	SOURCE							컴파일 시 적용						컴파일 완료 후 제거
 	CLASS							메모리로 로딩할 때 적용				메모리 로딩 완료 후 제거
 	RUNTIME							프로그램 실행할 때 적용				제거 안 됨. 계속 유지
 
 
 //어노테이션 선언 (유지정책 포함)
  
 @Target( { ElementType.Type, ElementType.FIELD, ElementType.METHOD } )
 @Retention(RetentionPolicy.RUNTIME)
 public @interface myAnnotation {
 
 	String str() default "문자열";
 	int value();
 	
 }	



 <어노테이션 설정 정보 이용>---------------------------------------------------------------
 
 	(boolean 타입)		지정맴버.isAnnotationPresnet(AnnotationName.class)			: 지정한 어노테이션이 적용 되었는지 여부 확인 
 	(Annotation 타입)		지정맴버.getAnnotation(AnnotationName.class)				: 지정한 어노테이션이 적용되었다면 어노테이션 리턴, 아니면 null 
 	(Annotation[] 타입)	지정맴버.getDeclaredAnnotations()							: 적용된 어노테이션 모두 리턴 
 	